<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric Wang的博客</title>
  <icon>https://www.gravatar.com/avatar/b70e941cdbb166441dfac343b945a180</icon>
  <subtitle>万物之中，希望至美</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.v2next.com/"/>
  <updated>2020-01-10T05:00:37.168Z</updated>
  <id>https://blog.v2next.com/</id>
  
  <author>
    <name>Eric Wang</name>
    <email>wdq1103@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>种草 ES2020 新特性</title>
    <link href="https://blog.v2next.com/2020/01/10/ES2020/"/>
    <id>https://blog.v2next.com/2020/01/10/ES2020/</id>
    <published>2020-01-10T01:56:19.000Z</published>
    <updated>2020-01-10T05:00:37.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：blue_yang</p><p><a href="https://juejin.im/post/5e09ca40518825499a5abff7" target="_blank" rel="noopener">https://juejin.im/post/5e09ca40518825499a5abff7</a>.</p><ul><li>JavaScript 公众号 <a href="https://mp.weixin.qq.com/s/rKhZmMUiv2fbRiqaGTWSHw" title="种草 ES2020 新特性" target="_blank" rel="noopener"><code>种草 ES2020 新特性</code></a></li></ul></blockquote><p>这几年，Ecma TC39 一年一次更新 ecmascript 规范标准，截止目前，以下特性已进入 finished 状态。现在带大家体验种草 ES2020 新特性。</p><p>下面是 EcmaScript features 从 2015 到今天为止。</p><ul><li>ES2015 aka ES6</li><li>ES2016 aka ES7</li><li>ES2017 aka ES8</li><li>ES2018 aka ES9</li><li>ES2019 aka ES10</li><li>ES2020 aka ES11</li></ul><a id="more"></a><h1 id="一：Promise-allSettled"><a href="#一：Promise-allSettled" class="headerlink" title="一：Promise.allSettled"></a>一：Promise.allSettled</h1><p><strong>Promise.all 缺陷</strong></p><p>都知道 <code>Promise.all</code> 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise 直接进入 <code>reject</code> 状态。</p><p>想象这个场景：你的页面有三个区域，分别对应三个独立的接口数据，使用 <code>Promise.all</code> 来并发三个接口，如果其中任意一个接口服务异常，状态是 <code>reject</code>,这会导致页面中该三个区域数据全都无法渲染出来，因为任何 <code>reject</code> 都会进入 catch 回调, 很明显，这是无法接受的，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="built_in">Promise</span>.reject(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">msg</span>: <span class="string">"服务异常"</span> &#125;),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">list</span>: [] &#125;),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">list</span>: [] &#125;)</span><br><span class="line">])</span><br><span class="line">  .then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果其中一个任务是 reject，则不会执行到这个回调。</span></span><br><span class="line">    RenderContent(ret);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 本例中会执行到这个回调</span></span><br><span class="line">    <span class="comment">// error: &#123;code: 500, msg: "服务异常"&#125;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态（fulfilled 或者 rejected）与结果（业务 value 或者 拒因 reason），在 then 里面通过 filter 来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性，而 Promise.allSettled 就是解决这问题的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.allSettled([</span><br><span class="line">  <span class="built_in">Promise</span>.reject(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">msg</span>: <span class="string">"服务异常"</span> &#125;),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">list</span>: [] &#125;),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">list</span>: [] &#125;)</span><br><span class="line">]).then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0: &#123;status: "rejected", reason: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">        1: &#123;status: "fulfilled", value: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">        2: &#123;status: "fulfilled", value: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="comment">// 过滤掉 rejected 状态，尽可能多的保证页面区域数据渲染</span></span><br><span class="line">  RenderContent(</span><br><span class="line">    ret.filter(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> el.status !== <span class="string">"rejected"</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="二：可选链（Optional-chaining）"><a href="#二：可选链（Optional-chaining）" class="headerlink" title="二：可选链（Optional chaining）"></a>二：可选链（Optional chaining）</h1><p><code>可选链</code>可让我们在查询具有多层级的对象时，不再需要进行冗余的各种前置校验。</p><p>日常开发中，我们经常会遇到这种查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = user &amp;&amp; user.info &amp;&amp; user.info.name;</span><br></pre></td></tr></table></figure><p>又或是这种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = user &amp;&amp; user.info &amp;&amp; user.info.getAge &amp;&amp; user.info.getAge();</span><br></pre></td></tr></table></figure><p>这是一种丑陋但又不得不做的前置校验，否则很容易命中 <code>Uncaught TypeError: Cannot read property...</code> 这种错误，这极有可能让你整个应用挂掉。</p><p>用了 Optional Chaining ，上面代码会变成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = user?.info?.name;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = user?.info?.getAge?.();</span><br></pre></td></tr></table></figure><p>可选链中的 <code>?</code> 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。</p><h1 id="三：空值合并运算符（Nullish-coalescing-Operator）"><a href="#三：空值合并运算符（Nullish-coalescing-Operator）" class="headerlink" title="三：空值合并运算符（Nullish coalescing Operator）"></a>三：空值合并运算符（Nullish coalescing Operator）</h1><p>当我们查询某个属性时，经常会遇到，如果没有该属性就会设置一个默认的值。比如下面代码中查询玩家等级。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> level = (user.data &amp;&amp; user.data.level) || <span class="string">"暂无等级"</span>;</span><br></pre></td></tr></table></figure><p>在 <code>JS</code> 中，空字符串、0 等，当进行逻辑操作符判时，会自动转化为 false。在上面的代码里，如果玩家等级本身就是 0 级, 变量 level 就会被赋值<code>暂无等级</code>字符串，这是逻辑错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> level;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> user.level === <span class="string">"number"</span>) &#123;</span><br><span class="line">  level = user.level;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.level) &#123;</span><br><span class="line">  level = <span class="string">"暂无等级"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  level = user.level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看用空值合并运算符如何处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   "level": 0</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">let</span> level = <span class="string">`<span class="subst">$&#123;user.level&#125;</span>级`</span> ?? <span class="string">"暂无等级"</span>;</span><br><span class="line"><span class="comment">// level -&gt; '0级'</span></span><br></pre></td></tr></table></figure><p>用空值合并运算在逻辑正确的前提下，代码更加简洁。</p><p><code>空值合并运算符</code> 与 <code>可选链</code> 相结合，可以很轻松处理多级查询并赋予默认值问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> level = user?.level ?? <span class="string">"暂无等级"</span>;</span><br></pre></td></tr></table></figure><h1 id="四：dynamic-import"><a href="#四：dynamic-import" class="headerlink" title="四：dynamic-import"></a>四：dynamic-import</h1><p>按需 import 提案几年前就已提出，如今终于能进入 ES 正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几 M 的 JS 资源已成常态，而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">el.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">`/path/current-logic.js`</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">module</span>.doSomthing();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// load error;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，webpack 目前已很好的支持了该特性。</p><h1 id="五：globalThis"><a href="#五：globalThis" class="headerlink" title="五：globalThis"></a>五：globalThis</h1><p><code>Javascript</code> 在不同的环境获取全局对象有不通的方式，<code>node</code> 中通过 global, web 中通过 window, self 等，有些甚至通过 <code>this</code> 获取，但通过 <code>this</code> 是及其危险的，t<code>his</code> 在 <code>js</code> 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。<br>过去获取全局对象，可通过一个全局函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getGlobal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> global !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> global;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"unable to locate global object"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> globals = getGlobal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis</span></span><br></pre></td></tr></table></figure><p>而 <code>globalThis</code> 目的就是提供一种标准化方式访问全局对象，有了 <code>globalThis</code> 后，你可以在任意上下文，任意时刻都能获取到全局对象。</p><h1 id="六：BigInt"><a href="#六：BigInt" class="headerlink" title="六：BigInt"></a>六：BigInt</h1><p>Js 中 Number 类型只能安全的表示<code>-(2^53-1)</code>至 <code>2^53-1</code> 范的值，即 Number.MIN_SAFE_INTEGER 至 Number.MAX_SAFE_INTEGER，超出这个范围的整数计算或者表示会丢失精度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">Number</span>.MAX_SAFE_INTEGER; <span class="comment">// -&gt; 9007199254740991</span></span><br><span class="line"></span><br><span class="line">num = num + <span class="number">1</span>; <span class="comment">// -&gt; 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次加 +1 后无法正常运算</span></span><br><span class="line">num = num + <span class="number">1</span>; <span class="comment">// -&gt; 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个不同的值，却返回了true</span></span><br><span class="line"><span class="number">9007199254740992</span> === <span class="number">9007199254740993</span>; <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><p>为解决此问题，ES2020 提供一种新的数据类型：BigInt。 使用 BigInt 有两种方式：</p><ol><li>在整数字面量后面加 n。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigIntNum = <span class="number">9007199254740993</span>n;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>BigInt</code> 函数。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigIntNum = BigInt(<span class="number">9007199254740</span>);</span><br><span class="line"><span class="keyword">const</span> anOtherBigIntNum = BigInt(<span class="string">"9007199254740993"</span>);</span><br></pre></td></tr></table></figure><p>通过 <code>BigInt</code>， 我们可以安全的进行大数整型计算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigNumRet = <span class="number">9007199254740993</span>n + <span class="number">9007199254740993</span>n; <span class="comment">// -&gt; -&gt; 18014398509481986n</span></span><br><span class="line"></span><br><span class="line">bigNumRet.toString(); <span class="comment">// -&gt; '18014398509481986'</span></span><br></pre></td></tr></table></figure><p>注意:</p><ol><li><code>BigInt</code> 是一种新的数据原始（primitive）类型。</li><li>尽可能避免通过调用函数 <code>BigInt</code> 方式来实例化超大整型。因为参数的字面量实际也是 Number 类型的一次实例化，超出安全范围的数字，可能会引起精度丢失。</li></ol><h1 id="七：String-prototype-matchAll"><a href="#七：String-prototype-matchAll" class="headerlink" title="七：String.prototype.matchAll"></a>七：String.prototype.matchAll</h1><p>思考下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'&lt;text&gt;JS&lt;/text&gt;&lt;text&gt;正则&lt;/text&gt;'</span>;</span><br><span class="line">vaconstr reg = <span class="regexp">/&lt;\w+&gt;(.*?)&lt;\/\w+&gt;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// -&gt; ["&lt;text&gt;JS&lt;/text&gt;", "&lt;text&gt;正则&lt;/text&gt;"]</span></span><br></pre></td></tr></table></figure><p>可以看出返回的数组里包含了父匹配项，但未匹配到子项（group）。移除全局搜索符“g”试试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"&lt;text&gt;JS&lt;/text&gt;&lt;text&gt;正则&lt;/text&gt;"</span>;</span><br><span class="line"><span class="comment">// 注意这里没有全局搜素标示符“g”</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;\w+&gt;(.*?)&lt;\/\w+&gt;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面会打印出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">    "&lt;text&gt;JS&lt;/text&gt;", </span></span><br><span class="line"><span class="comment">    "JS", </span></span><br><span class="line"><span class="comment">    index: 0, </span></span><br><span class="line"><span class="comment">    input: </span></span><br><span class="line"><span class="comment">    "&lt;text&gt;JS&lt;/text&gt;&lt;text&gt;正则&lt;/text&gt;", </span></span><br><span class="line"><span class="comment">    groups: undefined</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这样可以获取到匹配的父项，包括子项（group），但只能获取到第一个满足的匹配字符。能看出上面无法匹配到<code>&lt;text&gt;正则&lt;/text&gt;</code>。<br>如果获取到全局所有匹配项，包括子项呢？<br><code>ES2020</code> 提供了一种简易的方式：<code>String.prototype.matchAll</code>, 该方法会返回一个迭代器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"&lt;text&gt;JS&lt;/text&gt;&lt;text&gt;正则&lt;/text&gt;"</span>;</span><br><span class="line"><span class="keyword">const</span> allMatchs = str.matchAll(<span class="regexp">/&lt;\w+&gt;(.*?)&lt;\/\w+&gt;/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> allMatchs) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一次迭代返回：</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">    "&lt;text&gt;JS&lt;/text&gt;", </span></span><br><span class="line"><span class="comment">    "JS", </span></span><br><span class="line"><span class="comment">    index: 0, </span></span><br><span class="line"><span class="comment">    input: "&lt;text&gt;JS&lt;/text&gt;&lt;text&gt;正则&lt;/text&gt;", </span></span><br><span class="line"><span class="comment">    groups: undefined</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代返回：</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">    "&lt;text&gt;正则&lt;/text&gt;", </span></span><br><span class="line"><span class="comment">    "正则", </span></span><br><span class="line"><span class="comment">    index: 15, </span></span><br><span class="line"><span class="comment">    input: "&lt;text&gt;JS&lt;/text&gt;&lt;text&gt;正则&lt;/text&gt;", </span></span><br><span class="line"><span class="comment">    groups: undefined</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p><a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md" target="_blank" rel="noopener">https://github.com/tc39/proposals/blob/master/finished-proposals.md</a> Finished Proposals</p></li><li><p><a href="https://prop-tc39.now.sh/" target="_blank" rel="noopener">https://prop-tc39.now.sh/</a> TC39 Proposals</p></li><li><p><a href="https://mp.weixin.qq.com/s/rKhZmMUiv2fbRiqaGTWSHw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/rKhZmMUiv2fbRiqaGTWSHw</a> JavaScript 公众号</p></li><li><p><a href="https://dev.to/carlillo/es2020-features-in-simple-examples-1513" target="_blank" rel="noopener">https://dev.to/carlillo/es2020-features-in-simple-examples-1513</a> ES2020 Features in simple examples</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;作者：blue_yang&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5e09ca40518825499a5abff7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5e09ca40518825499a5abff7&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 公众号 &lt;a href=&quot;https://mp.weixin.qq.com/s/rKhZmMUiv2fbRiqaGTWSHw&quot; title=&quot;种草 ES2020 新特性&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;种草 ES2020 新特性&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这几年，Ecma TC39 一年一次更新 ecmascript 规范标准，截止目前，以下特性已进入 finished 状态。现在带大家体验种草 ES2020 新特性。&lt;/p&gt;
&lt;p&gt;下面是 EcmaScript features 从 2015 到今天为止。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES2015 aka ES6&lt;/li&gt;
&lt;li&gt;ES2016 aka ES7&lt;/li&gt;
&lt;li&gt;ES2017 aka ES8&lt;/li&gt;
&lt;li&gt;ES2018 aka ES9&lt;/li&gt;
&lt;li&gt;ES2019 aka ES10&lt;/li&gt;
&lt;li&gt;ES2020 aka ES11&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="ES2020" scheme="https://blog.v2next.com/tags/ES2020/"/>
    
      <category term="JavaScript" scheme="https://blog.v2next.com/tags/JavaScript/"/>
    
      <category term="ES11" scheme="https://blog.v2next.com/tags/ES11/"/>
    
      <category term="EcmaScript" scheme="https://blog.v2next.com/tags/EcmaScript/"/>
    
      <category term="ES Next" scheme="https://blog.v2next.com/tags/ES-Next/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin React App</title>
    <link href="https://blog.v2next.com/2019/12/20/Kotlin-React-App/"/>
    <id>https://blog.v2next.com/2019/12/20/Kotlin-React-App/</id>
    <published>2019-12-20T07:51:00.000Z</published>
    <updated>2020-01-08T14:34:41.714Z</updated>
    
    <content type="html"><![CDATA[<p>Great guide for Kotlin + React: <a href="https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/01_Introduction" target="_blank" rel="noopener">https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/01_Introduction</a></p><p>Instead of using JSX, Kotlin React is using its own domain-specific language (DSL) to describe it: <a href="https://medium.com/@ralf.stuckert/getting-started-with-kotlin-react-c5f3b079a8bf" target="_blank" rel="noopener">https://medium.com/@ralf.stuckert/getting-started-with-kotlin-react-c5f3b079a8bf</a></p><a id="more"></a><h3 id="Frontend-with-Kotlin-JS"><a href="#Frontend-with-Kotlin-JS" class="headerlink" title="Frontend with Kotlin/JS"></a>Frontend with Kotlin/JS</h3><p>JetBrains create-react-kotlin-app repo: <a href="https://github.com/JetBrains/create-react-kotlin-app" target="_blank" rel="noopener">https://github.com/JetBrains/create-react-kotlin-app</a></p><p>JetBrains kotlin-react-router-dom repo: <a href="https://github.com/JetBrains/kotlin-wrappers/tree/master/kotlin-react-router-dom" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin-wrappers/tree/master/kotlin-react-router-dom</a></p><p>I have created a repo, here’s the link: <a href="https://github.com/ericwdq/kotlin-react-app" target="_blank" rel="noopener">https://github.com/ericwdq/kotlin-react-app</a></p><p>Add the kotlin-react-router-dom to the app, in order to integrate react-kotlin app into micro frontend container</p><ol><li>We need to add @jetbrains/kotlin-react-router-dom” modules to package.json by using commands</li><li>List “browserRouter” or “hashRouter” to register the react routers</li><li>Creating navigation component like sidebar for routing, and expose the paths to container</li></ol><p>Can reuse react components from npm : <a href="https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/07_Using_Packages_From_NPM" target="_blank" rel="noopener">https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/07_Using_Packages_From_NPM</a></p><p>→ but need to add types manually</p><p>→ can this be used to reuse fiori for react components? components we wrote in JS?</p><p>List of reusable, pre-typed projects: <a href="https://github.com/JetBrains/kotlin-wrappers" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin-wrappers</a></p><p>How to add dependency into project, take fundamental-react for example</p><ol><li>We have to wrap each fundamental control/component, because fundamental index don’t have a default export. And each file will export a single component, which will be a huge workload as fundamental react has many components, and the content may changed.</li><li>We can package fundamental-react in a specified naming space, and export them as a common library to all projects</li><li>Use @file:JsModule(“fundamental-react/Button”) to define a component, and better to add an interface ButtonProps to make it typed</li><li>Code snippet may like those</li></ol><p>Next step is how to package them into ui-framework and ui-utils template.</p><h3 id="Microfrontend-compatible-code-split"><a href="#Microfrontend-compatible-code-split" class="headerlink" title="Microfrontend compatible? code split?"></a>Microfrontend compatible? code split?</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Great guide for Kotlin + React: &lt;a href=&quot;https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/01_Introduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/01_Introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead of using JSX, Kotlin React is using its own domain-specific language (DSL) to describe it: &lt;a href=&quot;https://medium.com/@ralf.stuckert/getting-started-with-kotlin-react-c5f3b079a8bf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/@ralf.stuckert/getting-started-with-kotlin-react-c5f3b079a8bf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://blog.v2next.com/tags/React/"/>
    
      <category term="Kotlin" scheme="https://blog.v2next.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL Apollo Server implementation</title>
    <link href="https://blog.v2next.com/2019/10/28/GraphQL-Apollo-Server-implementation/"/>
    <id>https://blog.v2next.com/2019/10/28/GraphQL-Apollo-Server-implementation/</id>
    <published>2019-10-28T08:16:52.000Z</published>
    <updated>2019-12-30T09:08:25.989Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目标是采用一个 GraphQL 库，能够使用较小的 payload 调用后端查询的 API，减少 HTTP 请求和响应的时间，优化 API 数据访问速度。</p></blockquote><p>当然<code>GraphQL</code>还有很多的优势，能根据客户端的期望来返回 API 结构按需获取，API First，强类型 Schema，可以组合和连接多个 GraphQL API，合并为一个 API 等等。</p><p>我们选择了<code>GraphQL Apollo Server</code>的<code>ExpressJS</code>版本库, 运行在 <code>NodeJS</code> 环境中。</p><a id="more"></a><p>下面是<code>Apollo GraphQL</code>客户端和服务器的工作流程图：</p><p><img src="https://www.apollographql.com/docs/apollo-server/ee7fbac9c0ca5b1dd6aef886bb695e63/index-diagram.svg" alt="alt text" title="Apollo GraphQL workflow"></p><p><a href="https://www.apollographql.com/docs/apollo-server/" target="_blank" rel="noopener">https://www.apollographql.com/docs/apollo-server/</a></p><h3 id="配置-Apollo-Server-和-ExpressJS-在-NodeJS"><a href="#配置-Apollo-Server-和-ExpressJS-在-NodeJS" class="headerlink" title="配置 Apollo Server 和 ExpressJS 在 NodeJS:"></a>配置 <code>Apollo Server</code> 和 <code>ExpressJS</code> 在 <code>NodeJS</code>:</h3><p>安装依赖使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add apollo-server-express graphql graphql-tools</span><br></pre></td></tr></table></figure><p>Or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install apollo-server-express graphql graphql-tools</span><br></pre></td></tr></table></figure><h3 id="创建-GraphQL-Schema"><a href="#创建-GraphQL-Schema" class="headerlink" title="创建 GraphQL Schema"></a>创建 <code>GraphQL Schema</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ApolloServer = <span class="keyword">new</span> ApolloServer(&#123;</span><br><span class="line">  typeDefs: Types,</span><br><span class="line">  resolvers: Resolvers,</span><br><span class="line">  playground: &#123;</span><br><span class="line">    endpoint: <span class="string">`/graphql`</span>,</span><br><span class="line">    settings: &#123;</span><br><span class="line">      <span class="string">"editor.theme"</span>: <span class="string">"light"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建 <code>GraphQL Apollo</code> 服务器使用基本选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ApolloServer.applyMiddleware(&#123;</span><br><span class="line">  app: app, <span class="comment">// this parameter is express application</span></span><br><span class="line">  path: <span class="string">"/graphql"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建-GraphQL-Query"><a href="#创建-GraphQL-Query" class="headerlink" title="创建 GraphQL Query"></a>创建 <code>GraphQL Query</code></h3><p>以调用 BusinessPartner api 为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">  BusinessPartner(Id: Int!): BusinessPartner</span><br><span class="line">  BusinessPartners: [BusinessPartner]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-GraphQL-Type"><a href="#创建-GraphQL-Type" class="headerlink" title="创建 GraphQL Type"></a>创建 <code>GraphQL Type</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type BusinessPartner &#123;</span><br><span class="line">  Id: Int</span><br><span class="line">  BusinessPartner: Int</span><br><span class="line">  BusinessPartnerName: <span class="built_in">String</span></span><br><span class="line">  SearchTerm1: <span class="built_in">String</span></span><br><span class="line">  CreatedByUser: <span class="built_in">String</span></span><br><span class="line">  BusinessPartnerAddress: [BusinessPartnerAddress]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-GraphQL-Resolvers"><a href="#创建-GraphQL-Resolvers" class="headerlink" title="创建 GraphQL Resolvers"></a>创建 <code>GraphQL Resolvers</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BusinessPartner: <span class="keyword">async</span> (</span><br><span class="line">    parent: <span class="keyword">void</span>,</span><br><span class="line">    args: any,</span><br><span class="line">    info: GraphQLResolveInfo,</span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> api.getBusinessPartner(args.Id);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>完成创建后,运行 <code>yarn start</code>, 你可以访问 <a href="http://localhost:3000/graphql" target="_blank" rel="noopener">http://localhost:3000/graphql</a> 和测试你的 GraphQL query 在 Apollo Playgound.</p><p>GraphQL 有两种类型 <code>Query</code> 和 <code>Mutation</code>。</p><h3 id="下面是我学习查找一些有用的资源"><a href="#下面是我学习查找一些有用的资源" class="headerlink" title="下面是我学习查找一些有用的资源"></a>下面是我学习查找一些有用的资源</h3><p><a href="https://graphql.org/" target="_blank" rel="noopener">https://graphql.org/</a><br><a href="https://graphql.org/code/" target="_blank" rel="noopener">https://graphql.org/code/</a><br><a href="https://graphql.org/code/#javascript" target="_blank" rel="noopener">https://graphql.org/code/#javascript</a><br><a href="https://github.com/graphql/graphql-js/" target="_blank" rel="noopener">https://github.com/graphql/graphql-js/</a><br><a href="https://github.com/graphql/graphiql/" target="_blank" rel="noopener">https://github.com/graphql/graphiql/</a> graphiql<br><a href="https://www.apollographql.com/docs/apollo-server/" target="_blank" rel="noopener">https://www.apollographql.com/docs/apollo-server/</a></p><p>GraphQL Best Practices<br><a href="https://graphql.org/learn/best-practices/" target="_blank" rel="noopener">https://graphql.org/learn/best-practices/</a></p><p>Apollo graphql server:<br><a href="https://www.apollographql.com/docs/apollo-server/" target="_blank" rel="noopener">https://www.apollographql.com/docs/apollo-server/</a><br><a href="https://www.howtographql.com/graphql-js/8-filtering-pagination-and-sorting/" target="_blank" rel="noopener">https://www.howtographql.com/graphql-js/8-filtering-pagination-and-sorting/</a></p><p>Server:<br><a href="https://graphql.org/graphql-js/running-an-express-graphql-server/" target="_blank" rel="noopener">https://graphql.org/graphql-js/running-an-express-graphql-server/</a><br><a href="https://graphql.org/code/#javascript" target="_blank" rel="noopener">https://graphql.org/code/#javascript</a></p><p><a href="https://github.com/graphql/graphql-spec" target="_blank" rel="noopener">https://github.com/graphql/graphql-spec</a><br><a href="https://graphql.github.io/graphql-spec/June2018/" target="_blank" rel="noopener">https://graphql.github.io/graphql-spec/June2018/</a><br><a href="https://blog.apollographql.com/three-ways-to-represent-your-graphql-schema-a41f4175100d" target="_blank" rel="noopener">https://blog.apollographql.com/three-ways-to-represent-your-graphql-schema-a41f4175100d</a></p><p>Client: <a href="https://graphql.org/graphql-js/graphql-clients/" target="_blank" rel="noopener">https://graphql.org/graphql-js/graphql-clients/</a><br><a href="https://github.com/prisma/graphql-request" target="_blank" rel="noopener">https://github.com/prisma/graphql-request</a></p><p>Facebook data loader: <a href="https://github.com/graphql/dataloader" target="_blank" rel="noopener">https://github.com/graphql/dataloader</a></p><p>GraphQL API v4 Github<br><a href="https://developer.github.com/v4/" target="_blank" rel="noopener">https://developer.github.com/v4/</a></p><p>Dynamic schema and resolver generation<br><a href="https://www.contentful.com/blog/2018/12/21/dynamic-schema-generation-changing-data-models/" target="_blank" rel="noopener">https://www.contentful.com/blog/2018/12/21/dynamic-schema-generation-changing-data-models/</a><br><a href="https://blog.hasura.io/the-ultimate-guide-to-schema-stitching-in-graphql-f30178ac0072/" target="_blank" rel="noopener">https://blog.hasura.io/the-ultimate-guide-to-schema-stitching-in-graphql-f30178ac0072/</a><br><a href="https://github.com/apollographql/apollo-server/issues/2560" target="_blank" rel="noopener">https://github.com/apollographql/apollo-server/issues/2560</a></p><p><a href="https://medium.com/open-graphql/graphql-dynamic-persisted-queries-eb259700f1d3" target="_blank" rel="noopener">https://medium.com/open-graphql/graphql-dynamic-persisted-queries-eb259700f1d3</a></p><p>Modularizing your GraphQL schema code<br><a href="https://blog.apollographql.com/modularizing-your-graphql-schema-code-d7f71d5ed5f2" target="_blank" rel="noopener">https://blog.apollographql.com/modularizing-your-graphql-schema-code-d7f71d5ed5f2</a><br>每个 service 的数据结构契约，都放入了一个大而全的 GraphQL Schema 里；如果不做任何模块化和解耦，开发体验将会非常糟糕。每个团队成员，都去修改同一份 Schema 文件。<br>这明显是不合理的。GraphQL-BFF 的开发模式，应该跟 service 的领域模型，有一一对应的关系。然后通过某种形式，多个 services 自然整合到一起。</p><p>GraphQL-BFF：微服务背景下的前后端数据交互方案<br><a href="https://zhuanlan.zhihu.com/p/75241522" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/75241522</a><br>开发语言选用了 TypeScript，跑在 Node.js v10.x 版本上，服务端框架是 Koa v2.x 版本，使用 apollo-server-koa 模块去运行 GraphQL 服务。<br>Apollo-GraphQL 是 Node.js 社区里，比较知名和成熟的 GraphQL 框架。做了很多的细节工作，也有一些相对前沿的探索，比如 Apollo Federation 架构等。<br>不过，有两点值得一提：<br>1）Apollo-GraphQL 属于 GraphQL 社区的一部分，而非 Facebook 官方的 GraphQL 开发团队。Apollo-GraphQL 在官方 GraphQL 的基础上进行了带有他们自身理念特点的封装和设计。像 Apollo Federation 这类目前看来比较激进的方案，即使是 GraphQL 官方的开发人员，对此也持保留态度。<br>2）Apollo-GraphQL 的重心是前文所说的第一类 API Gateway 角色的 GraphQL 服务，本文探讨的是第二类。因此，Apollo-GraphQL 里有很多功能对我们来说没必要，有一些功能的使用方式，跟我们的场景也不契合。<br>我们主要使用的是 Apollo-GraphQL 的 graphql-tools 和 apollo-server-koa 两个模块，并在此基础上，进行了符合我们场景的设计和改编。</p><p>Decouple schema and resovler: –&gt; Loosly couple 松耦合<br>Merge 多个 GraphQL-Service 的 Schema 后生成的结果。可以看出来，跟之前手写的版本，总体上是一样的</p><p>TypeScript + GraphQL = TypeGraphQL<br><a href="https://zhuanlan.zhihu.com/p/56516614" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/56516614</a><br><a href="https://github.com/MichalLytek/type-graphql" target="_blank" rel="noopener">https://github.com/MichalLytek/type-graphql</a></p><p>GraphQL 快速入门教程<br><a href="https://zhuanlan.zhihu.com/p/75618997" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/75618997</a><br><a href="https://github.com/MudOnTire/graphQL-tutorial" target="_blank" rel="noopener">https://github.com/MudOnTire/graphQL-tutorial</a></p><p>How to build an Apollo GraphQL server with TypeScript and Webpack Hot Module Replacement<br><a href="https://medium.com/free-code-camp/build-an-apollo-graphql-server-with-typescript-and-webpack-hot-module-replacement-hmr-3c339d05184f" target="_blank" rel="noopener">https://medium.com/free-code-camp/build-an-apollo-graphql-server-with-typescript-and-webpack-hot-module-replacement-hmr-3c339d05184f</a><br><a href="https://github.com/apollographql/apollo-server/tree/master/packages/apollo-server-express" target="_blank" rel="noopener">https://github.com/apollographql/apollo-server/tree/master/packages/apollo-server-express</a></p><p>Running an Express GraphQL Server<br><a href="https://graphql.org/graphql-js/running-an-express-graphql-server/" target="_blank" rel="noopener">https://graphql.org/graphql-js/running-an-express-graphql-server/</a><br><a href="https://graphql.org/blog/mocking-with-graphql/" target="_blank" rel="noopener">https://graphql.org/blog/mocking-with-graphql/</a><br><a href="https://graphql.org/blog/graphql-a-query-language/" target="_blank" rel="noopener">https://graphql.org/blog/graphql-a-query-language/</a><br><a href="https://graphql.org/community/" target="_blank" rel="noopener">https://graphql.org/community/</a><br><a href="https://launchpad.graphql.com/98lq7vz8r" target="_blank" rel="noopener">https://launchpad.graphql.com/98lq7vz8r</a></p><p>Cannot use graphQL server with express router<br><a href="https://github.com/apollographql/apollo-server/issues/336" target="_blank" rel="noopener">https://github.com/apollographql/apollo-server/issues/336</a></p><p>GraphQL is the better REST<br><a href="https://www.graphql.com/" target="_blank" rel="noopener">https://www.graphql.com/</a><br><a href="https://www.howtographql.com/basics/1-graphql-is-the-better-rest/" target="_blank" rel="noopener">https://www.howtographql.com/basics/1-graphql-is-the-better-rest/</a></p><p>如何将 Web 主页性能提升十倍以上？<br><a href="https://www.infoq.cn/article/Xxyy8WZrWLwUlIF0*IxR" target="_blank" rel="noopener">https://www.infoq.cn/article/Xxyy8WZrWLwUlIF0*IxR</a></p><!-- GraphQL Evaluation: --><!-- https://wiki.wdf.sap.corp/wiki/display/Eureka/GraphQL+Evaluation --><!-- https://claims.np.eurekacloud.io/api/intelligent-claims/api/TenantConfig/v1/846277611134976 -->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;目标是采用一个 GraphQL 库，能够使用较小的 payload 调用后端查询的 API，减少 HTTP 请求和响应的时间，优化 API 数据访问速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然&lt;code&gt;GraphQL&lt;/code&gt;还有很多的优势，能根据客户端的期望来返回 API 结构按需获取，API First，强类型 Schema，可以组合和连接多个 GraphQL API，合并为一个 API 等等。&lt;/p&gt;
&lt;p&gt;我们选择了&lt;code&gt;GraphQL Apollo Server&lt;/code&gt;的&lt;code&gt;ExpressJS&lt;/code&gt;版本库, 运行在 &lt;code&gt;NodeJS&lt;/code&gt; 环境中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="GraphQL" scheme="https://blog.v2next.com/tags/GraphQL/"/>
    
      <category term="Apollo" scheme="https://blog.v2next.com/tags/Apollo/"/>
    
      <category term="Web API" scheme="https://blog.v2next.com/tags/Web-API/"/>
    
      <category term="NodeJs" scheme="https://blog.v2next.com/tags/NodeJs/"/>
    
      <category term="Evaluation" scheme="https://blog.v2next.com/tags/Evaluation/"/>
    
      <category term="Frontend Architecture" scheme="https://blog.v2next.com/tags/Frontend-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Micro Frontends In Action</title>
    <link href="https://blog.v2next.com/2019/08/18/Micro-Frontends-In-Action/"/>
    <id>https://blog.v2next.com/2019/08/18/Micro-Frontends-In-Action/</id>
    <published>2019-08-18T08:18:10.000Z</published>
    <updated>2020-01-08T14:33:28.822Z</updated>
    
    <content type="html"><![CDATA[<p>新部门的前端项目架构中实践了微前端，后面有时间再整理内容，下面在开发中收集的一些资料。</p><p>Micro frontends<br><a href="https://martinfowler.com/articles/micro-frontends.html" target="_blank" rel="noopener">https://martinfowler.com/articles/micro-frontends.html</a></p><p><a href="https://github.com/micro-frontends-demo" target="_blank" rel="noopener">https://github.com/micro-frontends-demo</a></p><p><a href="https://micro-frontends.org/" target="_blank" rel="noopener">https://micro-frontends.org/</a></p><a id="more"></a><p>Single SPA<br><a href="https://github.com/CanopyTax/single-spa" target="_blank" rel="noopener">https://github.com/CanopyTax/single-spa</a><br><a href="https://single-spa.js.org/" target="_blank" rel="noopener">https://single-spa.js.org/</a><br><a href="https://single-spa.surge.sh/" target="_blank" rel="noopener">https://single-spa.surge.sh/</a></p><p>Building Micro Frontends with React, Vue, and Single-spa<br><a href="https://github.com/dabit3/micro-frontend-example" target="_blank" rel="noopener">https://github.com/dabit3/micro-frontend-example</a><br><a href="https://dev.to/dabit3/building-micro-frontends-with-react-vue-and-single-spa-52op" target="_blank" rel="noopener">https://dev.to/dabit3/building-micro-frontends-with-react-vue-and-single-spa-52op</a></p><p>qiankun（乾坤）：An implementation of Micro Frontends, based on single-spa, but made it production-ready.<br>📦🚀Blazing fast, simple and completed solution for micro frontends.<br><a href="https://github.com/umijs/qiankun" target="_blank" rel="noopener">https://github.com/umijs/qiankun</a></p><p>可能是你见过最完善的微前端解决方案<br><a href="https://zhuanlan.zhihu.com/p/78362028" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/78362028</a></p><p>微前端如何落地？<br><a href="https://zhuanlan.zhihu.com/p/73090920" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/73090920</a></p><p>Micro frontends—a microservice approach to front-end web development<br><a href="https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16" target="_blank" rel="noopener">https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16</a></p><p>typescript+nodejs 是否适合开发大型项目？<br><a href="https://www.zhihu.com/question/338345340/answer/778069075" target="_blank" rel="noopener">https://www.zhihu.com/question/338345340/answer/778069075</a></p><p>Monorepo——大型前端项目的代码管理方式<br><a href="https://segmentfault.com/a/1190000019309820" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019309820</a></p><p>Google repo mgmt:<br><a href="https://zhuanlan.zhihu.com/p/50564255" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/50564255</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新部门的前端项目架构中实践了微前端，后面有时间再整理内容，下面在开发中收集的一些资料。&lt;/p&gt;
&lt;p&gt;Micro frontends&lt;br&gt;&lt;a href=&quot;https://martinfowler.com/articles/micro-frontends.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://martinfowler.com/articles/micro-frontends.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/micro-frontends-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/micro-frontends-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://micro-frontends.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://micro-frontends.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://blog.v2next.com/tags/React/"/>
    
      <category term="Frontend Architecture" scheme="https://blog.v2next.com/tags/Frontend-Architecture/"/>
    
      <category term="Micro Frontends" scheme="https://blog.v2next.com/tags/Micro-Frontends/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker Compose 部署 NodeJS Web App</title>
    <link href="https://blog.v2next.com/2019/04/10/docker-compose-for-node-webapp/"/>
    <id>https://blog.v2next.com/2019/04/10/docker-compose-for-node-webapp/</id>
    <published>2019-04-10T06:48:38.000Z</published>
    <updated>2019-12-27T07:59:54.786Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇 Post 使用了 <a href="https://blog.v2next.com/2019/03/15/nodejs-docker-webapp/" title="Docker 化 Node.js 的 Webapp">Docker 化 Node.js 的 Web App</a>，这一篇 Post 尝试玩下 docker compose。😊</p></blockquote><p>Dockerfile 和 dockerignore 前面已经创建过 🔗<a href="https://github.com/ericwdq/atlas-app" title="atlas-app github" target="_blank" rel="noopener"><code>atlas-app</code></a></p><ul><li><strong>新建</strong> <a href="https://github.com/ericwdq/atlas-app/docker-compose.yml" title="docker-compose.yml" target="_blank" rel="noopener"><code>docker-compose.yml</code></a></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line"><span class="attr">  build:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./:/usr/src/app</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">8888</span><span class="string">:6075</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">NODE_ENV=development</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">PORT=6075</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">"npm start"</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>8888 是宿主机 IP 和端口，6075 是跑在 docker 里 app 的端口</p><ul><li><strong>构建和运行</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f ./docker-compose.yml up -d</span><br></pre></td></tr></table></figure><ul><li><strong>查看 containers 和对应的 logs</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;container id&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>执行容器中 bash</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container id&gt; /bin/bash</span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>🔗 <a href="https://codewithhugo.com/setting-up-express-and-redis-with-docker-compose/" target="_blank" rel="noopener">A Docker/docker-compose setup with Redis and Node/Express</a></p><p>🔗 <a href="https://blog.codeship.com/using-docker-compose-for-nodejs-development/" target="_blank" rel="noopener">Using Docker Compose for NodeJS Development</a></p><p>🔗 <a href="https://www.ddhigh.com/2017/11/01/docker-composer-nodejs.html" target="_blank" rel="noopener">使用 docker-composer 部署 nodejs 应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;上一篇 Post 使用了 &lt;a href=&quot;https://blog.v2next.com/2019/03/15/nodejs-docker-webapp/&quot; title=&quot;Docker 化 Node.js 的 Webapp&quot;&gt;Docker 化 Node.js 的 Web App&lt;/a&gt;，这一篇 Post 尝试玩下 docker compose。😊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dockerfile 和 dockerignore 前面已经创建过 🔗&lt;a href=&quot;https://github.com/ericwdq/atlas-app&quot; title=&quot;atlas-app github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;atlas-app&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新建&lt;/strong&gt; &lt;a href=&quot;https://github.com/ericwdq/atlas-app/docker-compose.yml&quot; title=&quot;docker-compose.yml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;app:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  build:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./:/usr/src/app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;:6075&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;NODE_ENV=development&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;PORT=6075&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  command:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;npm start&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  restart:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.v2next.com/tags/NodeJS/"/>
    
      <category term="Docker" scheme="https://blog.v2next.com/tags/Docker/"/>
    
      <category term="Web App" scheme="https://blog.v2next.com/tags/Web-App/"/>
    
      <category term="Docker Compose" scheme="https://blog.v2next.com/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>Docker 化 Node.js 的 Web App</title>
    <link href="https://blog.v2next.com/2019/03/15/nodejs-docker-webapp/"/>
    <id>https://blog.v2next.com/2019/03/15/nodejs-docker-webapp/</id>
    <published>2019-03-15T05:54:17.000Z</published>
    <updated>2019-10-20T07:59:34.696Z</updated>
    
    <content type="html"><![CDATA[<p>首先通过<code>git clone</code>命令在本地 clone 好一个 node app。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ericwdq/atlas-app.git</span><br></pre></td></tr></table></figure><p>然后准备为 App 创建一个 Docker 镜像，最后再将创建的镜像运作在一个容器中。</p><p>Docker 可以把具有所有依赖关系的 App 打包到一个标准化单元的容器用于软件开发。 容器是 Linux 中基础概念，镜像就是运行在容器中的应用程序。</p><a id="more"></a><h1 id="运行-App-在-Docker-上"><a href="#运行-App-在-Docker-上" class="headerlink" title="运行 App 在 Docker 上"></a>运行 App 在 Docker 上</h1><ul><li><strong>创建 Dockerfile 文件在 App 的根目录</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8</span><br><span class="line"></span><br><span class="line"># Create app directory</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line"></span><br><span class="line"># Install app dependencies</span><br><span class="line"># A wildcard is used to ensure both package.json AND package-lock.json are copied</span><br><span class="line"># where available (npm@5+)</span><br><span class="line">COPY package*.json ./</span><br><span class="line"></span><br><span class="line">RUN npm install</span><br><span class="line"># If you are building your code for production</span><br><span class="line"># RUN npm ci --only=production</span><br><span class="line"></span><br><span class="line"># Bundle app source</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># Expose app ports</span><br><span class="line">EXPOSE 6075</span><br><span class="line"></span><br><span class="line"># Start application</span><br><span class="line">CMD [ "npm", "start" ]</span><br></pre></td></tr></table></figure><ul><li><strong>创建 dockerignore 文件在 App 的根目录</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure><ul><li><strong>构建镜像</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t eric/atlas-app .</span><br></pre></td></tr></table></figure><p>上面的 <code>.</code> 代表当前目录</p><ul><li><strong>查看 docker 镜像列表</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><pre>REPOSITORY                TAG                 IMAGE ID            CREATED             SIZEeric/atlas-app   latest              d6e01bdfc655        40 minutes ago      1.24GB</pre><ul><li><strong>运行容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8888:6075 -d -it eric/atlas-app</span><br></pre></td></tr></table></figure><p>上面的示例，Docker 将映射容器中的 6075 端口到 8888 你的机器的端口上，所以你可以访问 8888 端口去测试 app。当然你也可以使用的相同的端口转发。</p><ul><li><strong>获取容器的 ID</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li><strong>打印 app 的日志</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;container id&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>测试访问 app url</strong><br><a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a></p></li><li><p><strong>执行容器中的 bash</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container id&gt; /bin/bash</span><br></pre></td></tr></table></figure><ul><li><strong>删除容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm --force &lt;container id&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>删除镜像</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi Image &lt;container id&gt;</span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>🔗 <a href="https://nodejs.org/en/docs/guides/nodejs-docker-webapp/" target="_blank" rel="noopener">Dockerizing a Node.js web app</a></p><p><strong>下一步准备尝试使用 docker compose 多容器控制和自动化。 😊</strong></p><p>🔗 <a href="https://blog.codeship.com/using-docker-compose-for-nodejs-development/" target="_blank" rel="noopener">Using Docker Compose for NodeJS Development</a></p><p>🔗 <a href="https://www.ddhigh.com/2017/11/01/docker-composer-nodejs.html" target="_blank" rel="noopener">使用 docker-composer 部署 nodejs 应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先通过&lt;code&gt;git clone&lt;/code&gt;命令在本地 clone 好一个 node app。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/ericwdq/atlas-app.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后准备为 App 创建一个 Docker 镜像，最后再将创建的镜像运作在一个容器中。&lt;/p&gt;
&lt;p&gt;Docker 可以把具有所有依赖关系的 App 打包到一个标准化单元的容器用于软件开发。 容器是 Linux 中基础概念，镜像就是运行在容器中的应用程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.v2next.com/tags/NodeJS/"/>
    
      <category term="Docker" scheme="https://blog.v2next.com/tags/Docker/"/>
    
      <category term="Web App" scheme="https://blog.v2next.com/tags/Web-App/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks with Typescript</title>
    <link href="https://blog.v2next.com/2019/02/15/react-hooks-with-ts/"/>
    <id>https://blog.v2next.com/2019/02/15/react-hooks-with-ts/</id>
    <published>2019-02-15T09:21:46.000Z</published>
    <updated>2019-10-20T07:59:34.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. - <em>from</em> <a href="https://reactjs.org/docs/hooks-intro.html" title="Introducing Hooks" target="_blank" rel="noopener"><code>reactjs.org</code></a></p></blockquote><h1 id="React-Hooks-with-TypeScript"><a href="#React-Hooks-with-TypeScript" class="headerlink" title="React Hooks with TypeScript"></a>React Hooks with TypeScript</h1><p>🔗 <a href="https://blog.usejournal.com/using-react-hooks-with-typescript-aae6c7b2a3a9" target="_blank" rel="noopener">https://blog.usejournal.com/using-react-hooks-with-typescript-aae6c7b2a3a9</a></p><a id="more"></a><p>🔗 <a href="https://react-hooks-typescript.now.sh/" target="_blank" rel="noopener">https://react-hooks-typescript.now.sh/</a></p><p>🔗 <a href="https://github.com/ericwdq/react-hooks-typescript-example" target="_blank" rel="noopener">https://github.com/ericwdq/react-hooks-typescript-example</a></p><p>Code sandbox live demo:<br>🔗 <a href="https://codesandbox.io/s/github/skovy/react-hooks-typescript-example" target="_blank" rel="noopener">https://codesandbox.io/s/github/skovy/react-hooks-typescript-example</a></p><p>🔗 How to Use Typescript with React and Redux<br><a href="https://medium.com/@rossbulat/how-to-use-typescript-with-react-and-redux-a118b1e02b76" target="_blank" rel="noopener">https://medium.com/@rossbulat/how-to-use-typescript-with-react-and-redux-a118b1e02b76</a></p><h2 id="UseState"><a href="#UseState" class="headerlink" title="UseState"></a>UseState</h2><h2 id="UseEffect"><a href="#UseEffect" class="headerlink" title="UseEffect"></a>UseEffect</h2><h2 id="UseReducer"><a href="#UseReducer" class="headerlink" title="UseReducer"></a>UseReducer</h2><h2 id="UseContext"><a href="#UseContext" class="headerlink" title="UseContext"></a>UseContext</h2><p>Typescript:<br><a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;React Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. - &lt;em&gt;from&lt;/em&gt; &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot; title=&quot;Introducing Hooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;reactjs.org&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;React-Hooks-with-TypeScript&quot;&gt;&lt;a href=&quot;#React-Hooks-with-TypeScript&quot; class=&quot;headerlink&quot; title=&quot;React Hooks with TypeScript&quot;&gt;&lt;/a&gt;React Hooks with TypeScript&lt;/h1&gt;&lt;p&gt;🔗 &lt;a href=&quot;https://blog.usejournal.com/using-react-hooks-with-typescript-aae6c7b2a3a9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.usejournal.com/using-react-hooks-with-typescript-aae6c7b2a3a9&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://blog.v2next.com/tags/React/"/>
    
      <category term="React Hooks" scheme="https://blog.v2next.com/tags/React-Hooks/"/>
    
      <category term="ts" scheme="https://blog.v2next.com/tags/ts/"/>
    
      <category term="Typescript" scheme="https://blog.v2next.com/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 开发 Todo List</title>
    <link href="https://blog.v2next.com/2018/12/06/react-hooks/"/>
    <id>https://blog.v2next.com/2018/12/06/react-hooks/</id>
    <published>2018-12-06T06:45:59.000Z</published>
    <updated>2019-10-20T07:59:34.697Z</updated>
    
    <content type="html"><![CDATA[<p>Introducing Hooks<br><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">https://reactjs.org/docs/hooks-intro.html</a></p><p>How to Build a Todo List with React Hooks<br><a href="https://medium.freecodecamp.org/how-to-build-a-todo-list-with-react-hooks-ebaa4e3db3b" target="_blank" rel="noopener">https://medium.freecodecamp.org/how-to-build-a-todo-list-with-react-hooks-ebaa4e3db3b</a></p><p><a href="https://codesandbox.io/s/github/yazeedb/react-hooks-todo" target="_blank" rel="noopener">https://codesandbox.io/s/github/yazeedb/react-hooks-todo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Introducing Hooks&lt;br&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://reactjs.org/docs/hooks-in
      
    
    </summary>
    
    
      <category term="React" scheme="https://blog.v2next.com/tags/React/"/>
    
      <category term="React Hooks" scheme="https://blog.v2next.com/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>安装 nvm and NodeJS 在 SUSE/Linux 环境</title>
    <link href="https://blog.v2next.com/2018/12/03/install-nvm-and-nodejs-on-SUSE-Linux/"/>
    <id>https://blog.v2next.com/2018/12/03/install-nvm-and-nodejs-on-SUSE-Linux/</id>
    <published>2018-12-03T08:54:46.000Z</published>
    <updated>2019-10-20T07:59:34.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公司的项目产品 server build 的环境是 <code>SUSE Linux</code> ，所以前端项目构建使用的 NodeJS 是 linux 版本，研究了下 nvm 和 NodeJS 在 <code>SUSE</code> 的安装。</p></blockquote><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li>查看系统信息：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsb_release -a; uname -a; arch</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><pre>cnpvg50842594:~/.nvm/versions/node # lsb_release -a; uname -a; archLSB Version:    n/aDistributor ID: SUSE LINUXDescription:    SUSE Linux Enterprise Server 12 SP1Release:        12.1Codename:       n/aLinux cnpvg50842594 3.12.74-60.64.40-xen #1 SMP Wed May 10 05:07:16 UTC 2017 (4eb35ec) x86_64 x86_64 x86_64 GNU/Linuxx86_64</pre><ul><li>下载安装 nvm：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.10/install.sh | bash</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>编辑配置文件，添加.nvm：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.bashrc</span></span><br></pre></td></tr></table></figure><pre>export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm</pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>nvm github 安装脚本：<a href="https://github.com/creationix/nvm#install-script" target="_blank" rel="noopener">https://github.com/creationix/nvm#install-script</a></p><ul><li>查看 nvm 命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">command</span> -v nvm</span></span><br></pre></td></tr></table></figure><ul><li>安装 nodejs</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm install 10.14.0 [arch]</span></span><br></pre></td></tr></table></figure><ul><li>查看已安装的 nodejs 列表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure><p>下面有个 Youtobe 视频，基本安装步骤差不多。<br><a href="https://www.youtube.com/watch?v=MYXRbXabmsc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=MYXRbXabmsc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;公司的项目产品 server build 的环境是 &lt;code&gt;SUSE Linux&lt;/code&gt; ，所以前端项目构建使用的 NodeJS 是 linux 版本，研究了下 nvm 和 NodeJS 在 &lt;code&gt;SUSE&lt;/code&gt; 的安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看系统信息：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; lsb_release -a; uname -a; arch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;
cnpvg50842594:~/.nvm/versions/node # lsb_release -a; uname -a; arch
LSB Version:    n/a
Distributor ID: SUSE LINUX
Description:    SUSE Linux Enterprise Server 12 SP1
Release:        12.1
Codename:       n/a
Linux cnpvg50842594 3.12.74-60.64.40-xen #1 SMP Wed May 10 05:07:16 UTC 2017 (4eb35ec) x86_64 x86_64 x86_64 GNU/Linux
x86_64
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;下载安装 nvm：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.10/install.sh | bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nvm" scheme="https://blog.v2next.com/tags/nvm/"/>
    
      <category term="NodeJS" scheme="https://blog.v2next.com/tags/NodeJS/"/>
    
      <category term="SUSE" scheme="https://blog.v2next.com/tags/SUSE/"/>
    
      <category term="Linux" scheme="https://blog.v2next.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用 JSON Web Token</title>
    <link href="https://blog.v2next.com/2018/11/06/jwt-auth/"/>
    <id>https://blog.v2next.com/2018/11/06/jwt-auth/</id>
    <published>2018-11-06T02:53:26.000Z</published>
    <updated>2019-10-20T07:59:34.696Z</updated>
    
    <content type="html"><![CDATA[<p>Here are some scenarios where JSON Web Tokens are useful:</p><p>Authorization: This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token. Single Sign On is a feature that widely uses JWT nowadays, because of its small overhead and its ability to be easily used across different domains.</p><p>Information Exchange: JSON Web Tokens are a good way of securely transmitting information between parties. Because JWTs can be signed—for example, using public/private key pairs—you can be sure the senders are who they say they are. Additionally, as the signature is calculated using the header</p><p>[GitHub] Understanding JWT (JSON web token) authentication<br><a href="https://github.com/ericwdq/jwt-auth" target="_blank" rel="noopener">https://github.com/ericwdq/jwt-auth</a></p><p>不要用 JWT 替代 session 管理（上）：全面了解 Token,JWT,OAuth,SAML,SSO<br><a href="https://zhuanlan.zhihu.com/p/38942172" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38942172</a></p><p>jwt.io<br><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here are some scenarios where JSON Web Tokens are useful:&lt;/p&gt;
&lt;p&gt;Authorization: This is the most common scenario for using JWT. Once the 
      
    
    </summary>
    
    
      <category term="JSON Web Token" scheme="https://blog.v2next.com/tags/JSON-Web-Token/"/>
    
      <category term="JWT" scheme="https://blog.v2next.com/tags/JWT/"/>
    
      <category term="auth" scheme="https://blog.v2next.com/tags/auth/"/>
    
  </entry>
  
  <entry>
    <title>You Don&#39;t Need jQuery</title>
    <link href="https://blog.v2next.com/2018/09/12/you-dont-need-jquery-cn/"/>
    <id>https://blog.v2next.com/2018/09/12/you-dont-need-jquery-cn/</id>
    <published>2018-09-12T02:36:13.000Z</published>
    <updated>2019-10-20T07:59:34.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📰 GitHub 工程团队发布文章 🔗<a href="https://githubengineering.com/removing-jquery-from-github-frontend/" title="Removing jQuery from GitHub.com frontend" target="_blank" rel="noopener">Removing jQuery from GitHub.com frontend</a> 宣布他们将逐渐脱离 jQuery，直到能够完全删除库，使用浏览器原生的 APIs 可以满足所有需求。我清晰的记得刚开始 jQuery 的时候，使前端开发工作变的简单，高效。所以不得不说 jQuery 是一个伟大的库，❤️ 纪念一下，感谢 jQuery！</p></blockquote><p>我在 Github 上发现了这个很实用的 repo！🔗<a href="https://github.com/nefe/You-Dont-Need-jQuery" title="You Don&#39;t Need jQuery" target="_blank" rel="noopener">You Don’t Need jQuery</a> 有很多翻译版本，下面是中文版。</p><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10 以上浏览器。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#Query-Selector">Query Selector</a></li><li><a href="#CSS-amp-Style">CSS &amp; Style</a></li><li><a href="#DOM-Manipulation">DOM Manipulation</a></li><li><a href="#Ajax">Ajax</a></li><li><a href="#Events">Events</a></li><li><a href="#Utilities">Utilities</a></li><li><a href="#Promises">Promises</a></li><li><a href="#Animation">Animation</a></li><li><a href="#alternatives">Alternatives</a></li><li><a href="#Browser-Support">Browser Support</a></li></ol><h2 id="Query-Selector"><a href="#Query-Selector" class="headerlink" title="Query Selector"></a>Query Selector</h2><p>常用的 class、id、属性 选择器都可以使用 <code>document.querySelector</code> 或 <code>document.querySelectorAll</code> 替代。区别是</p><ul><li><code>document.querySelector</code> 返回第一个匹配的 Element</li><li><code>document.querySelectorAll</code> 返回所有匹配的 Element 组成的 NodeList。它可以通过 <code>[].slice.call()</code> 把它转成 Array</li><li>如果匹配不到任何 Element，jQuery 返回空数组 <code>[]</code>，但 <code>document.querySelector</code> 返回 <code>null</code>，注意空指针异常。当找不到时，也可以使用 <code>||</code> 设置默认的值，如 <code>document.querySelectorAll(selector) || []</code></li></ul><blockquote><p>注意：<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 性能很<strong>差</strong>。如果想提高性能，尽量使用 <code>document.getElementById</code>、<code>document.getElementsByClassName</code> 或 <code>document.getElementsByTagName</code>。</p></blockquote><ul><li><p><a href="#1.0">1.0</a> <a name="1.0"></a> 选择器查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">"selector"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"selector"</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.1">1.1</a> <a name="1.1"></a> class 查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">".class"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">".class"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"class"</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.2">1.2</a> <a name="1.2"></a> id 查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">"#id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.3">1.3</a> <a name="1.3"></a> 属性查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">"a[target=_blank]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"a[target=_blank]"</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.4">1.4</a> <a name="1.4"></a> 后代查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.find(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.querySelectorAll(<span class="string">"li"</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.5">1.5</a> <a name="1.5"></a> 兄弟及上下元素</p><ul><li><p>兄弟元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.siblings();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native - latest, Edge13+</span></span><br><span class="line">[...el.parentNode.children].filter(<span class="function"><span class="params">child</span> =&gt;</span> child !== el);</span><br><span class="line"><span class="comment">// Native (alternative) - latest, Edge13+</span></span><br><span class="line"><span class="built_in">Array</span>.from(el.parentNode.children).filter(<span class="function"><span class="params">child</span> =&gt;</span> child !== el);</span><br><span class="line"><span class="comment">// Native - IE10+</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.filter.call(el.parentNode.children, child =&gt; child !== el);</span><br></pre></td></tr></table></figure></li><li><p>上一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.prev();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.previousElementSibling;</span><br></pre></td></tr></table></figure></li><li><p>下一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next</span></span><br><span class="line">$el.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.nextElementSibling;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#1.6">1.6</a> <a name="1.6"></a> Closest</p><p>Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.closest(queryString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native - Only latest, NO IE</span></span><br><span class="line">el.closest(selector);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native - IE10+</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closest</span>(<span class="params">el, selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> matchesSelector =</span><br><span class="line">    el.matches ||</span><br><span class="line">    el.webkitMatchesSelector ||</span><br><span class="line">    el.mozMatchesSelector ||</span><br><span class="line">    el.msMatchesSelector;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (el) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matchesSelector.call(el, selector)) &#123;</span><br><span class="line">      <span class="keyword">return</span> el;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el = el.parentElement;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.7">1.7</a> <a name="1.7"></a> Parents Until</p><p>获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.parentsUntil(selector, filter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentsUntil</span>(<span class="params">el, selector, filter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> matchesSelector =</span><br><span class="line">    el.matches ||</span><br><span class="line">    el.webkitMatchesSelector ||</span><br><span class="line">    el.mozMatchesSelector ||</span><br><span class="line">    el.msMatchesSelector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// match start from parent</span></span><br><span class="line">  el = el.parentElement;</span><br><span class="line">  <span class="keyword">while</span> (el &amp;&amp; !matchesSelector.call(el, selector)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!filter) &#123;</span><br><span class="line">      result.push(el);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (matchesSelector.call(el, filter)) &#123;</span><br><span class="line">        result.push(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    el = el.parentElement;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.8">1.8</a> <a name="1.8"></a> Form</p><ul><li><p>Input/Textarea</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">"#my-input"</span>).val();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#my-input"</span>).value;</span><br></pre></td></tr></table></figure></li><li><p>获取 e.currentTarget 在 <code>.radio</code> 中的数组索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">".radio"</span>).index(e.currentTarget);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf.call(</span><br><span class="line">  <span class="built_in">document</span>.querySelectorAll(<span class="string">".radio"</span>),</span><br><span class="line">  e.currentTarget</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#1.9">1.9</a> <a name="1.9"></a> Iframe Contents</p><p>jQuery 对象的 iframe <code>contents()</code> 返回的是 iframe 内的 <code>document</code></p><ul><li><p>Iframe contents</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$iframe.contents();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">iframe.contentDocument;</span><br></pre></td></tr></table></figure></li><li><p>Iframe Query</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$iframe.contents().find(<span class="string">".css"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">iframe.contentDocument.querySelectorAll(<span class="string">".css"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#1.10">1.10</a> <a name="1.10"></a> 获取 body</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">document</span>.body;</span><br></pre></td></tr></table></figure></li><li><p><a href="#1.11">1.11</a> <a name="1.11"></a> 获取或设置属性</p><ul><li><p>获取属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.attr(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.getAttribute(<span class="string">"foo"</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery, note that this works in memory without change the DOM</span></span><br><span class="line">$el.attr(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.setAttribute(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取 <code>data-</code> 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.data(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (use `getAttribute`)</span></span><br><span class="line">el.getAttribute(<span class="string">"data-foo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (use `dataset` if only need to support IE 11+)</span></span><br><span class="line">el.dataset[<span class="string">"foo"</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="CSS-amp-Style"><a href="#CSS-amp-Style" class="headerlink" title="CSS &amp; Style"></a>CSS &amp; Style</h2><ul><li><p><a href="#2.1">2.1</a> <a name="2.1"></a> CSS</p><ul><li><p>Get style</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.css(<span class="string">"color"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="comment">// 注意：此处为了解决当 style 值为 auto 时，返回 auto 的问题</span></span><br><span class="line"><span class="keyword">const</span> win = el.ownerDocument.defaultView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 的意思是不返回伪类元素</span></span><br><span class="line">win.getComputedStyle(el, <span class="literal">null</span>).color;</span><br></pre></td></tr></table></figure></li><li><p>Set style</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.css(&#123; <span class="attr">color</span>: <span class="string">"#ff0011"</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.style.color = <span class="string">"#ff0011"</span>;</span><br></pre></td></tr></table></figure></li><li><p>Get/Set Styles</p><p>注意，如果想一次设置多个 style，可以参考 oui-dom-utils 中 <a href="https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L194" target="_blank" rel="noopener">setStyles</a> 方法</p></li><li><p>Add class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.addClass(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.classList.add(className);</span><br></pre></td></tr></table></figure></li><li><p>Remove class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.removeClass(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.classList.remove(className);</span><br></pre></td></tr></table></figure></li><li><p>has class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.hasClass(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.classList.contains(className);</span><br></pre></td></tr></table></figure></li><li><p>Toggle class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.toggleClass(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.classList.toggle(className);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#2.2">2.2</a> <a name="2.2"></a> Width &amp; Height</p><p>Width 与 Height 获取方法相同，下面以 Height 为例：</p><ul><li><p>Window height</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window height</span></span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 含 scrollbar</span></span><br><span class="line"><span class="built_in">window</span>.document.documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不含 scrollbar，与 jQuery 行为一致</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight;</span><br></pre></td></tr></table></figure></li><li><p>Document height</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="built_in">document</span>).height();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">const</span> html = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="keyword">const</span> height = <span class="built_in">Math</span>.max(</span><br><span class="line">  body.offsetHeight,</span><br><span class="line">  body.scrollHeight,</span><br><span class="line">  html.clientHeight,</span><br><span class="line">  html.offsetHeight,</span><br><span class="line">  html.scrollHeight</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>Element height</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.height();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHeight</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> styles = <span class="keyword">this</span>.getComputedStyle(el);</span><br><span class="line">  <span class="keyword">const</span> height = el.offsetHeight;</span><br><span class="line">  <span class="keyword">const</span> borderTopWidth = <span class="built_in">parseFloat</span>(styles.borderTopWidth);</span><br><span class="line">  <span class="keyword">const</span> borderBottomWidth = <span class="built_in">parseFloat</span>(styles.borderBottomWidth);</span><br><span class="line">  <span class="keyword">const</span> paddingTop = <span class="built_in">parseFloat</span>(styles.paddingTop);</span><br><span class="line">  <span class="keyword">const</span> paddingBottom = <span class="built_in">parseFloat</span>(styles.paddingBottom);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精确到整数（border-box 时为 height - border 值，content-box 时为 height + padding 值）</span></span><br><span class="line">el.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精确到小数（border-box 时为 height 值，content-box 时为 height + padding + border 值）</span></span><br><span class="line">el.getBoundingClientRect().height;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#2.3">2.3</a> <a name="2.3"></a> Position &amp; Offset</p><ul><li><p>Position</p><p>获得匹配元素相对父元素的偏移</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.position();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">&#123; <span class="attr">left</span>: el.offsetLeft, <span class="attr">top</span>: el.offsetTop &#125;</span><br></pre></td></tr></table></figure></li><li><p>Offset</p><p>获得匹配元素相对文档的偏移</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.offset();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> box = el.getBoundingClientRect();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    top: box.top + <span class="built_in">window</span>.pageYOffset - <span class="built_in">document</span>.documentElement.clientTop,</span><br><span class="line">    left:</span><br><span class="line">      box.left + <span class="built_in">window</span>.pageXOffset - <span class="built_in">document</span>.documentElement.clientLeft</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#2.4">2.4</a> <a name="2.4"></a> Scroll Top</p></li></ul><p>获取元素滚动条垂直位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">(<span class="built_in">document</span>.documentElement &amp;&amp; <span class="built_in">document</span>.documentElement.scrollTop) ||</span><br><span class="line">  <span class="built_in">document</span>.body.scrollTop;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="DOM-Manipulation"><a href="#DOM-Manipulation" class="headerlink" title="DOM Manipulation"></a>DOM Manipulation</h2><ul><li><p><a href="#3.1">3.1</a> <a name="3.1"></a> Remove</p><p>从 DOM 中移除元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.remove();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.parentNode.removeChild(el);</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.2">3.2</a> <a name="3.2"></a> Text</p><ul><li><p>Get text</p><p>返回指定元素及其后代的文本内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.text();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.textContent;</span><br></pre></td></tr></table></figure></li><li><p>Set text</p><p>设置元素的文本内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.text(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.textContent = string;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#3.3">3.3</a> <a name="3.3"></a> HTML</p><ul><li><p>Get HTML</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.html();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.innerHTML;</span><br></pre></td></tr></table></figure></li><li><p>Set HTML</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.html(htmlString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.innerHTML = htmlString;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="#3.4">3.4</a> <a name="3.4"></a> Append</p><p>Append 插入到子节点的末尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.append(<span class="string">"&lt;div id='container'&gt;hello&lt;/div&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (HTML string)</span></span><br><span class="line">el.insertAdjacentHTML(<span class="string">"beforeend"</span>, <span class="string">'&lt;div id="container"&gt;Hello World&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (Element)</span></span><br><span class="line">el.appendChild(newEl);</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.5">3.5</a> <a name="3.5"></a> Prepend</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.prepend(<span class="string">"&lt;div id='container'&gt;hello&lt;/div&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (HTML string)</span></span><br><span class="line">el.insertAdjacentHTML(<span class="string">"afterbegin"</span>, <span class="string">'&lt;div id="container"&gt;Hello World&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (Element)</span></span><br><span class="line">el.insertBefore(newEl, el.firstChild);</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.6">3.6</a> <a name="3.6"></a> insertBefore</p><p>在选中元素前插入新节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$newEl.insertBefore(queryString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (HTML string)</span></span><br><span class="line">el.insertAdjacentHTML(</span><br><span class="line">  <span class="string">"beforebegin "</span>,</span><br><span class="line">  <span class="string">'&lt;div id="container"&gt;Hello World&lt;/div&gt;'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (Element)</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line"><span class="keyword">if</span> (el.parentNode) &#123;</span><br><span class="line">  el.parentNode.insertBefore(newEl, el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.7">3.7</a> <a name="3.7"></a> insertAfter</p><p>在选中元素后插入新节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$newEl.insertAfter(queryString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (HTML string)</span></span><br><span class="line">el.insertAdjacentHTML(<span class="string">"afterend"</span>, <span class="string">'&lt;div id="container"&gt;Hello World&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native (Element)</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line"><span class="keyword">if</span> (el.parentNode) &#123;</span><br><span class="line">  el.parentNode.insertBefore(newEl, el.nextSibling);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.8">3.8</a> <a name="3.8"></a> is</p><p>如果匹配给定的选择器，返回 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.is(selector);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.matches(selector);</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.9">3.9</a> <a name="3.9"></a> clone</p><p>深拷贝被选元素。（生成被选元素的副本，包含子节点、文本和属性。）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery</span></span><br><span class="line">$el.clone();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Native</span></span><br><span class="line">el.cloneNode();</span><br></pre></td></tr></table></figure></li></ul><p>//深拷贝添加参数‘true’<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- [3.10](#3.10) &lt;a name=&apos;3.10&apos;&gt;&lt;/a&gt; empty</span><br><span class="line"></span><br><span class="line">  移除所有子节点</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">//jQuery</span><br><span class="line">$el.empty();</span><br><span class="line"></span><br><span class="line">//Native</span><br><span class="line">el.innerHTML = &quot;&quot;;</span><br></pre></td></tr></table></figure></p><ul><li><a href="#3.11">3.11</a> <a name="3.11"></a> wrap</li></ul><p>把每个被选元素放置在指定的 HTML 结构中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery</span></span><br><span class="line">$(<span class="string">".inner"</span>).wrap(<span class="string">'&lt;div class="wrapper"&gt;&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Native</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">document</span>.querySelector(<span class="string">".inner"</span>), el =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">  wrapper.className = <span class="string">"wrapper"</span>;</span><br><span class="line">  el.parentNode.insertBefore(wrapper, el);</span><br><span class="line">  el.parentNode.removeChild(el);</span><br><span class="line">  wrapper.appendChild(el);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><a href="#3.12">3.12</a> <a name="3.12"></a> unwrap</p><p>移除被选元素的父元素的 DOM 结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">".inner"</span>).unwrap();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">".inner"</span>), el =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> elParentNode = el.parentNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (elParentNode !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">    elParentNode.parentNode.insertBefore(el, elParentNode);</span><br><span class="line">    elParentNode.parentNode.removeChild(elParentNode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.13">3.13</a> <a name="3.13"></a> replaceWith</p><p>用指定的元素替换被选的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery</span></span><br><span class="line">$(<span class="string">".inner"</span>).replaceWith(<span class="string">'&lt;div class="outer"&gt;&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Native</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">".inner"</span>), el =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> outer = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">  outer.className = <span class="string">"outer"</span>;</span><br><span class="line">  el.parentNode.insertBefore(outer, el);</span><br><span class="line">  el.parentNode.removeChild(el);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.14">3.14</a> <a name="3.14"></a> simple parse</p></li></ul><p>解析 HTML/SVG/XML 字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">`&lt;ol&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;b&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ol&gt;</span></span><br><span class="line"><span class="string">&lt;ol&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;c&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;d&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ol&gt;`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line">parse = range.createContextualFragment.bind(range);</span><br><span class="line"></span><br><span class="line">parse(<span class="string">`&lt;ol&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;b&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ol&gt;</span></span><br><span class="line"><span class="string">&lt;ol&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;c&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;d&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ol&gt;`</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">Fetch API</a> 是用于替换 XMLHttpRequest 处理 ajax 的新标准，Chrome 和 Firefox 均支持，旧浏览器可以使用 polyfills 提供支持。</p><p>IE9+ 请使用 <a href="http://github.com/github/fetch" target="_blank" rel="noopener">github/fetch</a>，IE8+ 请使用 <a href="https://github.com/camsong/fetch-ie8/" target="_blank" rel="noopener">fetch-ie8</a>，JSONP 请使用 <a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="noopener">fetch-jsonp</a>。</p><ul><li><p><a href="#4.1">4.1</a> <a name="4.1"></a> 从服务器读取数据并替换匹配元素的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(selector).load(url, completeCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">fetch(url)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> data.text())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(selector).innerHTML = data;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(completeCallback);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>完整地替代命名空间和事件代理，链接到 <a href="https://github.com/oneuijs/oui-dom-events" target="_blank" rel="noopener">https://github.com/oneuijs/oui-dom-events</a></p><ul><li><p><a href="#5.0">5.0</a> <a name="5.0"></a> Document ready by <code>DOMContentLoaded</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(eventHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="comment">// 检测 DOMContentLoaded 是否已完成</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.readyState !== <span class="string">"loading"</span>) &#123;</span><br><span class="line">  eventHandler();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, eventHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#5.1">5.1</a> <a name="5.1"></a> 使用 on 绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.on(eventName, eventHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.addEventListener(eventName, eventHandler);</span><br></pre></td></tr></table></figure></li><li><p><a href="#5.2">5.2</a> <a name="5.2"></a> 使用 off 解绑事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.off(eventName, eventHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.removeEventListener(eventName, eventHandler);</span><br></pre></td></tr></table></figure></li><li><p><a href="#5.3">5.3</a> <a name="5.3"></a> Trigger</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).trigger(<span class="string">"custom-event"</span>, &#123; <span class="attr">key1</span>: <span class="string">"data"</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.CustomEvent) &#123;</span><br><span class="line">  <span class="keyword">const</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">"custom-event"</span>, &#123; <span class="attr">detail</span>: &#123; <span class="attr">key1</span>: <span class="string">"data"</span> &#125; &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"CustomEvent"</span>);</span><br><span class="line">  event.initCustomEvent(<span class="string">"custom-event"</span>, <span class="literal">true</span>, <span class="literal">true</span>, &#123; <span class="attr">key1</span>: <span class="string">"data"</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">el.dispatchEvent(event);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><p>大部分实用工具都能在 native API 中找到. 其他高级功能可以选用专注于该领域的稳定性和性能都更好的库来代替，推荐 <a href="https://lodash.com" target="_blank" rel="noopener">lodash</a>。</p><ul><li><p><a href="#6.1">6.1</a> <a name="6.1"></a> 基本工具</p><ul><li>isArray</li></ul><p>检测参数是不是数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isArray(range);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(range);</span><br></pre></td></tr></table></figure><ul><li>isWindow</li></ul><p>检测参数是不是 window。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isWindow(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWindow</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj !== <span class="literal">null</span> &amp;&amp; obj !== <span class="literal">undefined</span> &amp;&amp; obj === obj.window;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>inArray</li></ul><p>在数组中搜索指定值并返回索引 (找不到则返回 -1)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.inArray(item, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">array.indexOf(item) &gt; <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6-way</span></span><br><span class="line">array.includes(item);</span><br></pre></td></tr></table></figure><ul><li>isNumeric</li></ul><p>检测传入的参数是不是数字。<br>Use <code>typeof</code> to decide the type or the <code>type</code> example for better accuracy.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isNumeric(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumeric</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>isFunction</li></ul><p>检测传入的参数是不是 JavaScript 函数对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isFunction(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> type = <span class="built_in">Object</span>.prototype.toString(item);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    type === <span class="string">"[object Function]"</span> || type === <span class="string">"[object GeneratorFunction]"</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>isEmptyObject</li></ul><p>检测对象是否为空 (包括不可枚举属性).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isEmptyObject(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>isPlainObject</li></ul><p>检测是不是扁平对象 (使用 “{}” 或 “new Object” 创建).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isPlainObject(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> obj !== <span class="string">"object"</span> ||</span><br><span class="line">    obj.nodeType ||</span><br><span class="line">    (obj !== <span class="literal">null</span> &amp;&amp; obj !== <span class="literal">undefined</span> &amp;&amp; obj === obj.window)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    obj.constructor &amp;&amp;</span><br><span class="line">    !<span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">      obj.constructor.prototype,</span><br><span class="line">      <span class="string">"isPrototypeOf"</span></span><br><span class="line">    )</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>extend</li></ul><p>合并多个对象的内容到第一个对象。<br>object.assign 是 ES6 API，也可以使用 <a href="https://github.com/ljharb/object.assign" target="_blank" rel="noopener">polyfill</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.extend(&#123;&#125;, defaultOpts, opts);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, defaultOpts, opts);</span><br></pre></td></tr></table></figure><ul><li>trim</li></ul><p>移除字符串头尾空白。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.trim(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">string.trim();</span><br></pre></td></tr></table></figure><ul><li>map</li></ul><p>将数组或对象转化为包含新内容的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.map(array, (value, index) =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">array.map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>each</li></ul><p>轮询函数，可用于平滑的轮询对象和数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.each(array, (index, value) =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">array.forEach(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>grep</li></ul><p>找到数组中符合过滤函数的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.grep(array, (value, index) =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">array.filter(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>type</li></ul><p>检测对象的 JavaScript [Class] 内部类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.type(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reTypeOf = <span class="regexp">/(?:^\[object\s(.*?)\]$)/</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString</span><br><span class="line">    .call(item)</span><br><span class="line">    .replace(reTypeOf, <span class="string">"$1"</span>)</span><br><span class="line">    .toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>merge</li></ul><p>合并第二个数组内容到第一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.merge(array1, array2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="comment">// 使用 concat，不能去除重复值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6，同样不能去除重复值</span></span><br><span class="line">array1 = [...array1, ...array2];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Set，可以去除重复值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([].concat(...args)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>now</li></ul><p>返回当前时间的数字呈现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure><ul><li>proxy</li></ul><p>传入函数并返回一个新函数，该函数绑定指定上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.proxy(fn, context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">fn.bind(context);</span><br></pre></td></tr></table></figure><ul><li>makeArray</li></ul><p>类数组对象转化为真正的 JavaScript 数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.makeArray(arrayLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(arrayLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6-way</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike);</span><br></pre></td></tr></table></figure></li><li><p><a href="#6.2">6.2</a> <a name="6.2"></a> 包含</p><p>检测 DOM 元素是不是其他 DOM 元素的后代.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.contains(el, child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el !== child &amp;&amp; el.contains(child);</span><br></pre></td></tr></table></figure></li><li><p><a href="#6.3">6.3</a> <a name="6.3"></a> Globaleval</p><p>全局执行 JavaScript 代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.globaleval(code);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Globaleval</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  script.text = code;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(script).parentNode.removeChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use eval, but context of eval is current, context of $.Globaleval is global.</span></span><br><span class="line"><span class="built_in">eval</span>(code);</span><br></pre></td></tr></table></figure></li><li><p><a href="#6.4">6.4</a> <a name="6.4"></a> 解析</p><ul><li>parseHTML</li></ul><p>解析字符串为 DOM 节点数组.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.parseHTML(htmlString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseHTML</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="built_in">document</span>.implementation.createHTMLDocument();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the base href for the created document so any parsed elements with URLs</span></span><br><span class="line">  <span class="comment">// are based on the document's URL</span></span><br><span class="line">  <span class="keyword">const</span> base = context.createElement(<span class="string">"base"</span>);</span><br><span class="line">  base.href = <span class="built_in">document</span>.location.href;</span><br><span class="line">  context.head.appendChild(base);</span><br><span class="line"></span><br><span class="line">  context.body.innerHTML = string;</span><br><span class="line">  <span class="keyword">return</span> context.body.children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>parseJSON</li></ul><p>传入格式正确的 JSON 字符串并返回 JavaScript 值.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.parseJSON(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(str);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>Promise 代表异步操作的最终结果。jQuery 用它自己的方式处理 promises，原生 JavaScript 遵循 <a href="http://promises-aplus.github.io/promises-spec/" target="_blank" rel="noopener">Promises/A+</a> 标准实现了最小 API 来处理 promises。</p><ul><li><p><a href="#7.1">7.1</a> <a name="7.1"></a> done, fail, always</p><p><code>done</code> 会在 promise 解决时调用，<code>fail</code> 会在 promise 拒绝时调用，<code>always</code> 总会调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$promise</span><br><span class="line">  .done(doneCallback)</span><br><span class="line">  .fail(failCallback)</span><br><span class="line">  .always(alwaysCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">promise.then(doneCallback, failCallback).then(alwaysCallback, alwaysCallback);</span><br></pre></td></tr></table></figure></li><li><p><a href="#7.2">7.2</a> <a name="7.2"></a> when</p><p><code>when</code> 用于处理多个 promises。当全部 promises 被解决时返回，当任一 promise 被拒绝时拒绝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.when($promise1, $promise2).done(<span class="function">(<span class="params">promise1Result, promise2Result</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="built_in">Promise</span>.all([$promise1, $promise2]).then([promise1Result, promise2Result] =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p><a href="#7.3">7.3</a> <a name="7.3"></a> Deferred</p><p>Deferred 是创建 promises 的一种方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> defer = <span class="keyword">new</span> $.Deferred();</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      defer.resolve(<span class="string">"some_value_computed_asynchronously"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      defer.reject(<span class="string">"failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> defer.promise();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        resolve(<span class="string">"some_value_computed_asynchronously"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">"failed"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deferred way</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> deferred = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    deferred.resolve = resolve;</span><br><span class="line">    deferred.reject = reject;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  deferred.promise = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> deferred;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> defer = defer();</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      defer.resolve(<span class="string">"some_value_computed_asynchronously"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      defer.reject(<span class="string">"failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> defer.promise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><ul><li><p><a href="#8.1">8.1</a> <a name="8.1"></a> Show &amp; Hide</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.show();</span><br><span class="line">$el.hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="comment">// 更多 show 方法的细节详见 https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L363</span></span><br><span class="line">el.style.display = <span class="string">""</span> | <span class="string">"inline"</span> | <span class="string">"inline-block"</span> | <span class="string">"inline-table"</span> | <span class="string">"block"</span>;</span><br><span class="line">el.style.display = <span class="string">"none"</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.2">8.2</a> <a name="8.2"></a> Toggle</p><p>显示或隐藏元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.toggle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  el.ownerDocument.defaultView.getComputedStyle(el, <span class="literal">null</span>).display === <span class="string">"none"</span></span><br><span class="line">) &#123;</span><br><span class="line">  el.style.display =</span><br><span class="line">    <span class="string">""</span> | <span class="string">"inline"</span> | <span class="string">"inline-block"</span> | <span class="string">"inline-table"</span> | <span class="string">"block"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  el.style.display = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.3">8.3</a> <a name="8.3"></a> FadeIn &amp; FadeOut</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.fadeIn(<span class="number">3000</span>);</span><br><span class="line">$el.fadeOut(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.style.transition = <span class="string">"opacity 3s"</span>;</span><br><span class="line"><span class="comment">// fadeIn</span></span><br><span class="line">el.style.opacity = <span class="string">"1"</span>;</span><br><span class="line"><span class="comment">// fadeOut</span></span><br><span class="line">el.style.opacity = <span class="string">"0"</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.4">8.4</a> <a name="8.4"></a> FadeTo</p><p>调整元素透明度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.fadeTo(<span class="string">"slow"</span>, <span class="number">0.15</span>);</span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.style.transition = <span class="string">"opacity 3s"</span>; <span class="comment">// 假设 'slow' 等于 3 秒</span></span><br><span class="line">el.style.opacity = <span class="string">"0.15"</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.5">8.5</a> <a name="8.5"></a> FadeToggle</p><p>动画调整透明度用来显示或隐藏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.fadeToggle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.style.transition = <span class="string">"opacity 3s"</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; opacity &#125; = el.ownerDocument.defaultView.getComputedStyle(el, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (opacity === <span class="string">"1"</span>) &#123;</span><br><span class="line">  el.style.opacity = <span class="string">"0"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  el.style.opacity = <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.6">8.6</a> <a name="8.6"></a> SlideUp &amp; SlideDown</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.slideUp();</span><br><span class="line">$el.slideDown();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">const</span> originHeight = <span class="string">"100px"</span>;</span><br><span class="line">el.style.transition = <span class="string">"height 3s"</span>;</span><br><span class="line"><span class="comment">// slideUp</span></span><br><span class="line">el.style.height = <span class="string">"0px"</span>;</span><br><span class="line"><span class="comment">// slideDown</span></span><br><span class="line">el.style.height = originHeight;</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.7">8.7</a> <a name="8.7"></a> SlideToggle</p><p>滑动切换显示或隐藏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.slideToggle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="keyword">const</span> originHeight = <span class="string">"100px"</span>;</span><br><span class="line">el.style.transition = <span class="string">"height 3s"</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; height &#125; = el.ownerDocument.defaultView.getComputedStyle(el, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">parseInt</span>(height, <span class="number">10</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">  el.style.height = originHeight;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  el.style.height = <span class="string">"0px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.8">8.8</a> <a name="8.8"></a> Animate</p><p>执行一系列 CSS 属性动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.animate(&#123; params &#125;, speed);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.style.transition = <span class="string">'all '</span> + speed;</span><br><span class="line"><span class="built_in">Object</span>.keys(params).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span></span><br><span class="line">  el.style[key] = params[key];</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives"></a>Alternatives</h2><ul><li><a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">你可能不需要 jQuery (You Might Not Need jQuery)</a> - 如何使用原生 JavaScript 实现通用事件，元素，ajax 等用法。</li><li><a href="http://github.com/npm-dom" target="_blank" rel="noopener">npm-dom</a> 以及 <a href="http://github.com/webmodules" target="_blank" rel="noopener">webmodules</a> - 在 NPM 上提供独立 DOM 模块的组织</li></ul><h2 id="Browser-Support"><a href="#Browser-Support" class="headerlink" title="Browser Support"></a>Browser Support</h2><table><thead><tr><th><img src="https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" alt="Chrome"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png" alt="Firefox"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png" alt="IE"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png" alt="Opera"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png" alt="Safari"></th></tr></thead><tbody><tr><td>Latest ✔</td><td>Latest ✔</td><td>10+ ✔</td><td>Latest ✔</td><td>6.1+ ✔</td></tr></tbody></table><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;📰 GitHub 工程团队发布文章 🔗&lt;a href=&quot;https://githubengineering.com/removing-jquery-from-github-frontend/&quot; title=&quot;Removing jQuery from GitHub.com frontend&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Removing jQuery from GitHub.com frontend&lt;/a&gt; 宣布他们将逐渐脱离 jQuery，直到能够完全删除库，使用浏览器原生的 APIs 可以满足所有需求。我清晰的记得刚开始 jQuery 的时候，使前端开发工作变的简单，高效。所以不得不说 jQuery 是一个伟大的库，❤️ 纪念一下，感谢 jQuery！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在 Github 上发现了这个很实用的 repo！🔗&lt;a href=&quot;https://github.com/nefe/You-Dont-Need-jQuery&quot; title=&quot;You Don&amp;#39;t Need jQuery&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;You Don’t Need jQuery&lt;/a&gt; 有很多翻译版本，下面是中文版。&lt;/p&gt;
&lt;p&gt;前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10 以上浏览器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://blog.v2next.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://blog.v2next.com/tags/jQuery/"/>
    
      <category term="Web" scheme="https://blog.v2next.com/tags/Web/"/>
    
      <category term="Github" scheme="https://blog.v2next.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>关于 WebAssembly / wasm</title>
    <link href="https://blog.v2next.com/2018/09/05/about-webassembly-wasm/"/>
    <id>https://blog.v2next.com/2018/09/05/about-webassembly-wasm/</id>
    <published>2018-09-05T06:32:13.000Z</published>
    <updated>2019-10-20T07:59:34.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在看 <a href="http://webassembly.org" title="webassembly.org" target="_blank" rel="noopener"><code>WebAssembly</code></a>，收集了一些资料。后面准备写一些 samples。</p></blockquote><h1 id="MDN-上关于-WebAssembly-的文档和示例。"><a href="#MDN-上关于-WebAssembly-的文档和示例。" class="headerlink" title="MDN 上关于 WebAssembly 的文档和示例。"></a>MDN 上关于 <code>WebAssembly</code> 的文档和示例。</h1><p>MDN Github 示例：<a href="https://github.com/mdn/webassembly-examples" target="_blank" rel="noopener">https://github.com/mdn/webassembly-examples</a><br>MDN WebAssembly 文档： <a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/WebAssembly</a>.</p><a id="more"></a><h1 id="MS-Blazor"><a href="#MS-Blazor" class="headerlink" title="MS Blazor:"></a>MS Blazor:</h1><p>微软 <code>Blazor</code> = <code>Browser</code> + <code>Razor</code> 是一个试验的 Web UI 框架基于 C#，Razor 和 HTML， 通过 <code>WebAssembly</code> 运行在浏览器中。</p><p><a href="https://blogs.msdn.microsoft.com/webdev/2018/02/06/blazor-experimental-project" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/webdev/2018/02/06/blazor-experimental-project</a></p><p>Blazor demo: <a href="https://blazor-demo.github.io/" target="_blank" rel="noopener">https://blazor-demo.github.io/</a><br>Blazor demo repo: <a href="https://github.com/blazor-demo" target="_blank" rel="noopener">https://github.com/blazor-demo</a></p><p>下面是逛知乎发现的 <code>Vim</code> 和 <code>WIndows 2000</code> 跑在 wasm 上，很赞！👍 非常有趣！😄</p><p><code>WebAssembly Vim</code>:<br><a href="https://github.com/rhysd/vim.wasm" target="_blank" rel="noopener">https://github.com/rhysd/vim.wasm</a><br><a href="https://zhuanlan.zhihu.com/p/39879691" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/39879691</a></p><p><code>WebAssembly Windows 2000</code>:<br><a href="https://yq.aliyun.com/roundtable/289191" target="_blank" rel="noopener">https://yq.aliyun.com/roundtable/289191</a><br><a href="https://zhuanlan.zhihu.com/p/44076682" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44076682</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;最近在看 &lt;a href=&quot;http://webassembly.org&quot; title=&quot;webassembly.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;WebAssembly&lt;/code&gt;&lt;/a&gt;，收集了一些资料。后面准备写一些 samples。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;MDN-上关于-WebAssembly-的文档和示例。&quot;&gt;&lt;a href=&quot;#MDN-上关于-WebAssembly-的文档和示例。&quot; class=&quot;headerlink&quot; title=&quot;MDN 上关于 WebAssembly 的文档和示例。&quot;&gt;&lt;/a&gt;MDN 上关于 &lt;code&gt;WebAssembly&lt;/code&gt; 的文档和示例。&lt;/h1&gt;&lt;p&gt;MDN Github 示例：&lt;a href=&quot;https://github.com/mdn/webassembly-examples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mdn/webassembly-examples&lt;/a&gt;&lt;br&gt;MDN WebAssembly 文档： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/en-US/docs/WebAssembly&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="WebAssembly" scheme="https://blog.v2next.com/tags/WebAssembly/"/>
    
      <category term="wasm" scheme="https://blog.v2next.com/tags/wasm/"/>
    
      <category term="Blazor" scheme="https://blog.v2next.com/tags/Blazor/"/>
    
      <category term="fun" scheme="https://blog.v2next.com/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>用 Vue, React, Angular 构建相同应用程序，区别在哪</title>
    <link href="https://blog.v2next.com/2018/08/25/react-vs-vue-vs-angular/"/>
    <id>https://blog.v2next.com/2018/08/25/react-vs-vue-vs-angular/</id>
    <published>2018-08-25T02:21:11.000Z</published>
    <updated>2019-10-20T07:59:34.697Z</updated>
    
    <content type="html"><![CDATA[<p>🔗<a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651008699&amp;idx=1&amp;sn=105db8b8489f5d751fec66ee52b9d1df&amp;chksm=bdbed6e88ac95ffe90816e46bb7e2895dfce49311946d199e6a24270a77d4524088c29441557&amp;mpshare=1&amp;scene=1&amp;srcid=0813Ok93GA9E7fusIU4IPRW7&amp;pass_ticket=3KaC3BtdKxMPCsbWjzKleE6EDcHghkVLHQfistwcqnY%3D#rd" title="用Vue和React构建相同应用程序，区别在哪？" target="_blank" rel="noopener">用 Vue 和 React 构建相同应用程序，区别在哪？- Infoq</a></p><p>🔗<a href="https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-react-and-vue-here-are-the-differences-e9a1ae8077fd" title="I created the exact same app in React and Vue. Here are the differences." target="_blank" rel="noopener">I created the exact same app in React and Vue. Here are the differences. - Medium</a></p><p>🔗<a href="https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-react-and-vue-part-2-angular-39b1aa289878" title="I created the same app in React and Vue (Part 2: Angular). " target="_blank" rel="noopener">I created the same app in React and Vue (Part 2: Angular). - Medium</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🔗&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651008699&amp;amp;idx=1&amp;amp;sn=105db8b8489f5d751fec66ee52b9d1df&amp;amp;chksm=bdbed6e88ac95ffe90816e46bb7e2895dfce49311946d199e6a24270a77d4524088c29441557&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0813Ok93GA9E7fusIU4IPRW7&amp;amp;pass_ticket=3KaC3BtdKxMPCsbWjzKleE6EDcHghkVLHQfistwcqnY%3D#rd&quot; title=&quot;用Vue和React构建相同应用程序，区别在哪？&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用 Vue 和 React 构建相同应用程序，区别在哪？- Infoq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗&lt;a href=&quot;https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-react-and-vue-here-are-the-differences-e9a1ae8077fd&quot; title=&quot;I created the exact same app in React and Vue. Here are the differences.&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;I created the exact same app in React and Vue. Here are the differences. - Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗&lt;a href=&quot;https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-react-and-vue-part-2-angular-39b1aa289878&quot; title=&quot;I created the same app in React and Vue (Part 2: Angular). &quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;I created the same app in React and Vue (Part 2: Angular). - Medium&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://blog.v2next.com/tags/React/"/>
    
      <category term="Vue" scheme="https://blog.v2next.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>使用nodejs开发WebSocket应用</title>
    <link href="https://blog.v2next.com/2018/08/20/nodejs-websocket/"/>
    <id>https://blog.v2next.com/2018/08/20/nodejs-websocket/</id>
    <published>2018-08-20T05:10:10.000Z</published>
    <updated>2019-10-20T07:59:34.696Z</updated>
    
    <content type="html"><![CDATA[<p>使用了<a href="https://www.npmjs.com/package/websocket" title="websocket package" target="_blank" rel="noopener"><code>websocket</code></a> <code>npm</code>搭建 websocket server, 也可以选择使用 <a href="https://socket.io/" title="socket.io" target="_blank" rel="noopener">socket.io</a>，但是<code>socket.io</code> 封装比较好，基本不用写什么代码，我还是想写些代码体验一下。</p><p>📲 Chat App:<br><a href="https://github.com/ericwdq/ws-chat" target="_blank" rel="noopener">https://github.com/ericwdq/ws-chat</a></p><p>✉️ Backend data push:<br><a href="https://github.com/ericwdq/d3-demo" target="_blank" rel="noopener">https://github.com/ericwdq/d3-demo</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用了&lt;a href=&quot;https://www.npmjs.com/package/websocket&quot; title=&quot;websocket package&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;websocket&lt;/code&gt;&lt;/a&gt; &lt;code&gt;npm&lt;/code&gt;搭建 websocket server, 也可以选择使用 &lt;a href=&quot;https://socket.io/&quot; title=&quot;socket.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;socket.io&lt;/a&gt;，但是&lt;code&gt;socket.io&lt;/code&gt; 封装比较好，基本不用写什么代码，我还是想写些代码体验一下。&lt;/p&gt;
&lt;p&gt;📲 Chat App:&lt;br&gt;&lt;a href=&quot;https://github.com/ericwdq/ws-chat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ericwdq/ws-chat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Backend data push:&lt;br&gt;&lt;a href=&quot;https://github.com/ericwdq/d3-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ericwdq/d3-demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.v2next.com/tags/NodeJS/"/>
    
      <category term="WebSocket" scheme="https://blog.v2next.com/tags/WebSocket/"/>
    
      <category term="ws" scheme="https://blog.v2next.com/tags/ws/"/>
    
      <category term="npm" scheme="https://blog.v2next.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Async and Await</title>
    <link href="https://blog.v2next.com/2018/03/23/Javascript-async-and-await/"/>
    <id>https://blog.v2next.com/2018/03/23/Javascript-async-and-await/</id>
    <published>2018-03-23T08:58:12.000Z</published>
    <updated>2019-10-20T07:59:34.695Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http
      
    
    </summary>
    
    
      <category term="ES2017" scheme="https://blog.v2next.com/tags/ES2017/"/>
    
      <category term="Javascript" scheme="https://blog.v2next.com/tags/Javascript/"/>
    
      <category term="Async" scheme="https://blog.v2next.com/tags/Async/"/>
    
      <category term="Await" scheme="https://blog.v2next.com/tags/Await/"/>
    
  </entry>
  
  <entry>
    <title>Promise使用技巧九则</title>
    <link href="https://blog.v2next.com/2018/03/22/promising-promise-tips/"/>
    <id>https://blog.v2next.com/2018/03/22/promising-promise-tips/</id>
    <published>2018-03-22T07:24:27.000Z</published>
    <updated>2019-10-20T07:59:34.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文译自 <a href="https://dev.to/kepta/promising-promise-tips--c8f" title="9 Promising Promise Tips" target="_blank" rel="noopener">9 Promising Promise Tips</a>。</p></blockquote><p>工程师们，你们总说 <code>Pormise</code> 好用！但有时候用起来是不是还很懵逼。本文传授给你九条实用的 Promise 使用技巧，帮助你和它建立起良好的关系！</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlauxVhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6966254/36483828-3e361d88-16e5-11e8-9f11-cbe99d719066.png" alt="alt text" title="Promise"></p><h1 id="1-你可以在-then-回调里返回-Promise"><a href="#1-你可以在-then-回调里返回-Promise" class="headerlink" title="1. 你可以在 .then 回调里返回 Promise"></a>1. 你可以在 <code>.then</code> 回调里返回 Promise</h1><blockquote><p>是的！你可以 .then 回调里返回 Promise！</p></blockquote><p>而且，返回的 promise 会在接下来的 <code>.then</code> 被自动打开（unwrapped）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这是一个 &#123; statusCode: 200 &#125; promise</span></span><br><span class="line">    <span class="keyword">return</span> serverStatusPromise(r);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 200；注意上面的 promise 被自动 unwrap 了</span></span><br><span class="line">    <span class="built_in">console</span>.log(resp.statusCode);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="2-每次调用-then-都会产生一个新的-Promise"><a href="#2-每次调用-then-都会产生一个新的-Promise" class="headerlink" title="2. 每次调用 .then 都会产生一个新的 Promise"></a>2. 每次调用 <code>.then</code> 都会产生一个新的 Promise</h1><blockquote><p>如果你熟悉 JavaScript 的链式调用，对这种用法一定不陌生。</p></blockquote><p>调用 <code>.then</code> 和 <code>.catch</code> 时都会创建一个新的 Promise。这个新的 Promise 可以继续使用 <code>.then</code> 或者 <code>.catch</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> statusProm = fetchServerStatus();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promA = statusProm.then(<span class="function"><span class="params">r</span> =&gt;</span> (r.statusCode === <span class="number">200</span> ? <span class="string">"good"</span> : <span class="string">"bad"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promB = promA.then(<span class="function"><span class="params">r</span> =&gt;</span> (r === <span class="string">"good"</span> ? <span class="string">"ALL OK"</span> : <span class="string">"NOTOK"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promC = statusProm.then(<span class="function"><span class="params">r</span> =&gt;</span> fetchThisAnotherThing());</span><br></pre></td></tr></table></figure><p>重点注意， <code>promA</code>、 <code>promB</code> 和 <code>promC</code> 虽然相关，但都是不同的 <code>promise</code> 实例。</p><p>我喜欢把这种 <code>.then</code> 链当做一个巨大的水暖系统，如果父节点出了故障，热水将无法流入到自节点中。例如，如果 promB 故障了，其他节点不受影响，但是如果 statusProm 出问题了，其他节点就会被影响，也就是被 rejected。</p><h1 id="3-在任何情况下，Promise-resolve-reject-状态都是一致的"><a href="#3-在任何情况下，Promise-resolve-reject-状态都是一致的" class="headerlink" title="3. 在任何情况下，Promise resolve/reject 状态都是一致的"></a>3. 在任何情况下，Promise <code>resolve/reject</code> 状态都是一致的</h1><p>这是 Promise 之所以好用的原因。简单理解，就是如果一个 promise 在多个地方使用，当它被 <code>resolve</code> 或者 <code>reject</code> 的时候，都会获得通知。</p><blockquote><p>而且 promise 是无法被修改的，因此它可以随意传递。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yourFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> yourAwesomeProm = makeMeProm();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 无论坏叔叔如何消费你的 promise，你的 promise 都可以正常工作</span></span><br><span class="line">  yourEvilUncle(yourAwesomeProm);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> yourAwesomeProm.then(<span class="function"><span class="params">r</span> =&gt;</span> importantProcessing(r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yourEvilUncle</span>(<span class="params">prom</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 坏叔叔</span></span><br><span class="line">  <span class="keyword">return</span> prom.then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">Promise</span>.reject(<span class="string">"destroy!!"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise 的设计避免了恶意的破坏，如我所说：“没事，可以把 promise 随便扔！”</p><h1 id="4-Promise-构造函数不是万金油"><a href="#4-Promise-构造函数不是万金油" class="headerlink" title="4. Promise 构造函数不是万金油"></a>4. Promise 构造函数不是万金油</h1><p>我发现有些工程师在任何地方都会使用 Promise 的 constructor，还认为这就是 promise 的使用方式。这是不对的，根本原因就是 constructor API 与原来 callback API 很像，老的习惯很难改。</p><blockquote><p>如果你的代码中遍布 Promise constructor，你的做法就是错的！</p></blockquote><p>Promise 构造函数正确的使用场景如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">"/etc/passwd"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> rej(err);</span><br><span class="line">    <span class="keyword">return</span> res(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><b><code>Promise constructor</code> 只在将回调转成 promise 时使用。</b></p><p>看一个冗余的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fetchPromise = fetchSomeData(.....);</span><br><span class="line">    fetchPromise</span><br><span class="line">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            res(data); <span class="comment">// 错误的方式</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> rej(err))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 看上去对就是对的</span></span><br><span class="line"><span class="keyword">return</span> fetchSomeData(...);</span><br></pre></td></tr></table></figure><p>在 Node.js 中，推荐使用 <a href="http://2ality.com/2017/05/util-promisify.html" title="util.promisify" target="_blank" rel="noopener">util.promisify</a>。用来将回调 API 转成 promise 式的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">"util"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFileAsync = promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line">readFileAsync(<span class="string">"myfile.txt"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(r))</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.error(e));</span><br></pre></td></tr></table></figure><h1 id="5-使用-Promise-resolve"><a href="#5-使用-Promise-resolve" class="headerlink" title="5. 使用 Promise.resolve"></a>5. 使用 Promise.resolve</h1><p>JavaScript 提供了 <code>Promise.resolve</code> API，是产生 Promise 对象的一种快捷方式，这个 promise 对象是被 <code>resolve</code> 的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> similarProm = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> res(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> prom = <span class="built_in">Promise</span>.resolve(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>这有很多使用场景，我最喜欢的一个是，将一个同步的对象转成一个 promise：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将一个同步函数转成异步的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用来在不确定返回值是普通对象还是 promise 时，将返回值封装为 promise 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goodProm</span>(<span class="params">maybePromise</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(maybePromise);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodProm(<span class="number">5</span>).then(<span class="built_in">console</span>.log); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个 promise resolve 成 5</span></span><br><span class="line"><span class="keyword">var</span> sixPromise = fetchMeNumber(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">goodProm(sixPromise).then(<span class="built_in">console</span>.log); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5，注意，每层 promise 都被自动 unwrap 了</span></span><br><span class="line">goodProm(<span class="built_in">Promise</span>.resolve(<span class="built_in">Promise</span>.resolve(<span class="number">5</span>))).then(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><h1 id="6-使用-Promise-reject"><a href="#6-使用-Promise-reject" class="headerlink" title="6. 使用 Promise.reject"></a>6. 使用 Promise.reject</h1><p>与 <code>Promise.resolve</code> 类似，它也是一种快捷写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rejProm = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, reject</span>) =&gt;</span> reject(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">rejProm.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>我最喜欢的 Promise.reject 的用法是，尽早地 reject：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">myVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!mVal) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"myVal is required"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这些将巨大的 callback 转成 promise</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>.then</code> 中使用 reject：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (val != <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'Not Good'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e)) <span class="comment">// Not Good</span></span><br></pre></td></tr></table></figure><h1 id="7-使用-Promise-all"><a href="#7-使用-Promise-all" class="headerlink" title="7. 使用 Promise.all"></a>7. 使用 Promise.all</h1><p>JavaScript 还提供了 <code>Promise.all</code>，但它不是什么快捷方式。</p><p>可以如下总结它的算法：</p><pre>  接受一个 promise 的数组  等待所有这些 promise 完成  返回一个新的 Promise，将所有的 resolve 结果放进一个数组里  只要有一个  promise 失败/rejected，这个新的 promise 将会被 rejected</pre><p>下例展示了所有 promise 都 resolve 的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prom1 = <span class="built_in">Promise</span>.resolve(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> prom2 = fetchServerStatus(); <span class="comment">// returns a promise of &#123;statusCode: 200&#125;</span></span><br><span class="line"></span><br><span class="line">Proimise.all([prom1, prom2])</span><br><span class="line">.then([val1, val2] =&gt; &#123; <span class="comment">// notice that it resolves into an Array</span></span><br><span class="line">    <span class="built_in">console</span>.log(val1); <span class="comment">// 5</span></span><br><span class="line">    <span class="built_in">console</span>.log(val2.statusCode); <span class="comment">// 200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>下例展示有一个失败的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prom1 = <span class="built_in">Promise</span>.resolve(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> prom2 = fetchServerStatus(); <span class="comment">// returns a promise of &#123;statusCode: 200&#125;</span></span><br><span class="line"></span><br><span class="line">Proimise.all([prom1, prom2])</span><br><span class="line">.then([val1, val2] =&gt; &#123; <span class="comment">// notice that it resolves into an Array</span></span><br><span class="line">    <span class="built_in">console</span>.log(val1); <span class="comment">// 5</span></span><br><span class="line">    <span class="built_in">console</span>.log(val2.statusCode); <span class="comment">// 200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>Promise.all</code> 是一点不笨，只要有一个 promise 被 reject 了，它就直接 reject，不会等到其他 promise 完成。</p></blockquote><h1 id="8-不要害怕-reject-或者不要在每一个-then-后面使用-catch"><a href="#8-不要害怕-reject-或者不要在每一个-then-后面使用-catch" class="headerlink" title="8. 不要害怕 reject 或者不要在每一个 .then 后面使用 .catch"></a>8. 不要害怕 reject 或者不要在每一个 .then 后面使用 .catch</h1><p>我们是不是常常感到有很多隐藏的错误没有被处理？</p><p>不用担心像下面这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> fetchSomeData(...);</span><br></pre></td></tr></table></figure><p>你可以在任何你想处理的地方解决或者延续 rejection。</p><p><b>处理掉 rejection</b><br>这很简单，在 <code>.catch</code> 回调中，无论你返回什么都会变成 resolve，除非你返回一个 <code>Promise.reject</code>，才会延续 rejection。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5.</span>length) <span class="comment">// &lt;-- something wrong happenned here</span></span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;  <span class="comment">// &lt;-- making javascript great again</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r); <span class="comment">// 5</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e); <span class="comment">// this function will never be called :)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><b>reject rejection</b><br>reject rejection 的方法就是什么都不做。通常，父函数比起当前函数更擅长处理 rejection。</p><p>要记住一个要点，一旦你写了 <code>.catch</code> 就意味着 rejection 已经被处理了，这与同步的 <code>try/catch</code> 类似。</p><p>如果你确实想要阻断 rejection（我强烈不推荐这么做）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5.</span>length) <span class="comment">// &lt;-- something wrong happenned here</span></span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  errorLogger(e); <span class="comment">// do something impure</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(e); <span class="comment">// reject it, Yes you can do that!</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r); <span class="comment">// this .then (or any subsequent .then) will never be called as we rejected it above :)</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e); <span class="comment">//&lt;-- it becomes this catch's problem</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>.then(x,y)</code> 和 <code>then(x).catch(x)</code></p><p><code>.then</code> 接受第二个回调参数来处理错误。虽然与 <code>then(x).catch(x)</code> 看一起类似，但却有所不同，不同点在于可捕获的错误。</p><p>下面例子很好地说了这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'something wrong happened'</span>));</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.error(e); <span class="comment">// something wrong happened</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'something wrong happened'</span>));</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">// callback handles error coming from the chain above the current `.then`</span></span><br><span class="line">    <span class="built_in">console</span>.error(e); <span class="comment">// no error logged</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="9-避免-then-嵌套"><a href="#9-避免-then-嵌套" class="headerlink" title="9. 避免 .then 嵌套"></a>9. 避免 <code>.then</code> 嵌套</h1><p>这个原则理解起来很简单，就是避免在 <code>.then</code> 里面继续使用 <code>.then</code> 或者 .catch。相信我，这绝对是可以避免的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line">request(opts).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.statusCode === <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(opts)</span><br><span class="line">      .then(<span class="function"><span class="params">r</span> =&gt;</span> r.text())</span><br><span class="line">      .catch(<span class="function"><span class="params">err2</span> =&gt;</span> <span class="built_in">console</span>.error(err2));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确用法</span></span><br><span class="line">request(opts)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.statusCode === <span class="number">400</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> request(opts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">r</span> =&gt;</span> r.text())</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.erro(err));</span><br></pre></td></tr></table></figure><p>就算是如下这种情况，也可以使用 <code>Promise.all</code> 来解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">myVal</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promA = foo(myVal);</span><br><span class="line">    <span class="keyword">const</span> promB = anotherPromMake(myVal);</span><br><span class="line">    <span class="keyword">return</span> promA</span><br><span class="line">          .then(<span class="function"><span class="params">valA</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> promB.then(<span class="function"><span class="params">valB</span> =&gt;</span> hungryFunc(valA, valB)); <span class="comment">// very hungry!</span></span><br><span class="line">          &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">myVal</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promA = foo(myVal);</span><br><span class="line">    <span class="keyword">const</span> promB = anotherPromMake(myVal);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([prom, anotherProm])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">[valA, valB]</span>) =&gt;</span> &#123;   <span class="comment">// putting ES6 destructing to good use</span></span><br><span class="line">    <span class="built_in">console</span>.log(valA, valB) <span class="comment">// all the resolved values</span></span><br><span class="line">    <span class="keyword">return</span> hungryFunc(valA, valB)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好了，真心希望本文可以帮到你更好地理解 Promise！</p><p><a href="https://qianduan.group/posts/5a9be8980cf6b624d2239cbd" title="Forked from https://qianduan.group - 前端外刊评论" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文译自 &lt;a href=&quot;https://dev.to/kepta/promising-promise-tips--c8f&quot; title=&quot;9 Promising Promise Tips&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;9 Promising Promise Tips&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工程师们，你们总说 &lt;code&gt;Pormise&lt;/code&gt; 好用！但有时候用起来是不是还很懵逼。本文传授给你九条实用的 Promise 使用技巧，帮助你和它建立起良好的关系！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--zlauxVhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6966254/36483828-3e361d88-16e5-11e8-9f11-cbe99d719066.png&quot; alt=&quot;alt text&quot; title=&quot;Promise&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-你可以在-then-回调里返回-Promise&quot;&gt;&lt;a href=&quot;#1-你可以在-then-回调里返回-Promise&quot; class=&quot;headerlink&quot; title=&quot;1. 你可以在 .then 回调里返回 Promise&quot;&gt;&lt;/a&gt;1. 你可以在 &lt;code&gt;.then&lt;/code&gt; 回调里返回 Promise&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;是的！你可以 .then 回调里返回 Promise！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而且，返回的 promise 会在接下来的 &lt;code&gt;.then&lt;/code&gt; 被自动打开（unwrapped）：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;r&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这是一个 &amp;#123; statusCode: 200 &amp;#125; promise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; serverStatusPromise(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;resp&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 200；注意上面的 promise 被自动 unwrap 了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(resp.statusCode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://blog.v2next.com/tags/Javascript/"/>
    
      <category term="ES6" scheme="https://blog.v2next.com/tags/ES6/"/>
    
      <category term="Promise" scheme="https://blog.v2next.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Parcel，零配置开发 React 应用！</title>
    <link href="https://blog.v2next.com/2017/12/28/Create-a-React-app-with-zero-configuration-using-Parcel/"/>
    <id>https://blog.v2next.com/2017/12/28/Create-a-React-app-with-zero-configuration-using-Parcel/</id>
    <published>2017-12-28T03:27:17.000Z</published>
    <updated>2019-10-20T07:59:34.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文译自 <a href="http://blog.jakoblind.no/react-parcel/" title="Create a React app with zero configuration using Parcel" target="_blank" rel="noopener">Create a React app with zero configuration using Parcel</a> 已经经历三四年的发展，社区和技术趋于成熟，它已经成为了前端开发中的必备工具。那问题来了，会有新的工具来挑战 webpack 的地位吗？各位不妨看看本文的 Parcel，说不定就是未来的主角。</p></blockquote><p>一开始使用 React 的痛苦想必大家都经历过。在真正进入编码之前，需要花大量的时间搞清楚如何配置 webpack。</p><p><a href="https://github.com/facebookincubator/create-react-app" title="Create React App" target="_blank" rel="noopener">Create React App</a> 项目的流行就是因为它简化了配置，加快了项目初始化的速度。俗话说，成也风云，败也风云。将 webpack 配置隐藏既是它的优点，也是它的缺点。随着项目不断地扩大，你可能想做一些高级配置，就需要将 webpack 配置从 Create React App “拖”（eject）出来，这段配置异常复杂，这就回到了老问题——webpack 还是得学习啊！</p><p>最近，一个新的构建工具 <a href="https://parceljs.org/" title="Parcel" target="_blank" rel="noopener">Parcel</a> 出现了，它是零配置的！真的不敢相信有这么好的东西，看起来所有问题都将迎刃而解。</p><a id="more"></a><p>我在一个大项目中尝试使用 Parcel，效果拔群。build 出包经过优化，要知道用 webpack 的时候，我需要花数天时间来实现相同的优化。</p><p>我想这个工具潜力无限，我们一起来看看如何使用它来轻松搭建一个 React 应用。</p><h2 id="使用-Parcel-开发-React-应用"><a href="#使用-Parcel-开发-React-应用" class="headerlink" title="使用 Parcel 开发 React 应用"></a>使用 Parcel 开发 React 应用</h2><p>首先，创建一个 NPM 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-parcel</span><br><span class="line"><span class="built_in">cd</span> react-parcel</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>npm init 会询问你一些问题，直接按 enter 键使用默认值即可。</p><p>下一步安装 React、babel 和 Parcel 依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-parcel</span><br><span class="line"><span class="built_in">cd</span> react-parcel</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>接下来，创建 .babelrc 文件，告诉 parcel 我们使用 ES6 和 React JSX：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"react"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 React App，就两个文件：</p><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mountNode = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"Jane"</span> /&gt;</span>, mountNode);</span></span><br></pre></td></tr></table></figure><p>index.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>React starter app<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，只需要在 package.json 添加一个启动脚本就可以把我们的应用跑起来了：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "parcel index.html",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>搞定，启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ericwdq/parcel-react" title="parcel-react - Github Repo" target="_blank" rel="noopener">parcel-react - Github Repo</a></p><p><a href="https://zhuanlan.zhihu.com/p/32375500?group_id=929116167755902976" title="Forked from 知乎" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文译自 &lt;a href=&quot;http://blog.jakoblind.no/react-parcel/&quot; title=&quot;Create a React app with zero configuration using Parcel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Create a React app with zero configuration using Parcel&lt;/a&gt; 已经经历三四年的发展，社区和技术趋于成熟，它已经成为了前端开发中的必备工具。那问题来了，会有新的工具来挑战 webpack 的地位吗？各位不妨看看本文的 Parcel，说不定就是未来的主角。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一开始使用 React 的痛苦想必大家都经历过。在真正进入编码之前，需要花大量的时间搞清楚如何配置 webpack。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot; title=&quot;Create React App&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Create React App&lt;/a&gt; 项目的流行就是因为它简化了配置，加快了项目初始化的速度。俗话说，成也风云，败也风云。将 webpack 配置隐藏既是它的优点，也是它的缺点。随着项目不断地扩大，你可能想做一些高级配置，就需要将 webpack 配置从 Create React App “拖”（eject）出来，这段配置异常复杂，这就回到了老问题——webpack 还是得学习啊！&lt;/p&gt;
&lt;p&gt;最近，一个新的构建工具 &lt;a href=&quot;https://parceljs.org/&quot; title=&quot;Parcel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Parcel&lt;/a&gt; 出现了，它是零配置的！真的不敢相信有这么好的东西，看起来所有问题都将迎刃而解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://blog.v2next.com/tags/React/"/>
    
      <category term="Parcel" scheme="https://blog.v2next.com/tags/Parcel/"/>
    
      <category term="Build System" scheme="https://blog.v2next.com/tags/Build-System/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊性能优化</title>
    <link href="https://blog.v2next.com/2017/12/27/Talk-about-performance-optimization/"/>
    <id>https://blog.v2next.com/2017/12/27/Talk-about-performance-optimization/</id>
    <published>2017-12-27T03:28:08.000Z</published>
    <updated>2019-10-20T07:59:34.695Z</updated>
    
    <content type="html"><![CDATA[<p>不管是应付前端面试还是改进产品体验，性能优化都是躲不开的话题。这里我们就简单聊一聊性能优化。</p><h2 id="传输快-vs-体验快"><a href="#传输快-vs-体验快" class="headerlink" title="传输快 vs 体验快"></a>传输快 vs 体验快</h2><p>优化的目的是让用户有“快”的感受，那如何让用户感受到快呢？</p><p>加载速度真的很快，用户打开输入网址按下回车立即看到了页面<br>加载速度并没有变快，但用户感觉你的网站很快</p><h2 id="传输快"><a href="#传输快" class="headerlink" title="传输快"></a>传输快</h2><p>所谓的真快就是网站资源以最快的速度到达用户浏览器，那如何去做呢？我们先粗略定一些原则：</p><ul><li>传输的内容体积要小</li><li>传输的内容数量要少</li><li>网速要足够快</li><li>服务器响应要及时</li><li>能重复利用的资源要利用好</li><li>暂时不需要的资源先不要</li><li>将来需要的资源抽空要</li><li>下面就能顺藤摸瓜，做个细化</li></ul><a id="more"></a><ol><li>传输的内容体积要小</li><li>图片要压缩</li><li>图片根据支持情况选择体积更小的格式(如 webp)</li><li>css、js 内容压缩</li><li>服务端开启 Gzip，在传输数据之前再次压缩</li><li>传输的内容数量要少</li><li>图片图标合并（css sprite）、svg 图标合并（svg sprite）</li><li>css、js 文件打包合并</li><li>网速要足够快</li><li>服务器出口带宽要够</li><li>考虑到南北差异、运营商差异，在不同地区部署服务器</li><li>静态资源放 CDN</li><li>服务器响应要及时</li><li>接口响应速度要快(数据库优化、查询优化、算法优化)</li><li>cpu、内存、硬盘读写不要成为瓶颈；多加几台机器</li><li>重要页面(首页)静态化。服务端提前渲染后首页生成静态页面，用户访问首页直接返回静态页面，不需要像其他页面那样还需加载 css、js 再获取数据渲染展示</li><li>能重复利用的资源要利用好</li><li>服务器设置合适的静态资源缓存时间</li><li>前端文件打包时做合理的分块，让公共的资源缓存后能被多个页面复用</li><li>暂时不需要的资源先不要</li><li>图片懒加载</li><li>功能、模块、组件按需加载</li><li>将来需要的资源抽空先拿到</li></ol><p>1.DNS 预解析</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//jirengu.com"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2.预连接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//jirengu.com"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>3.预获取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"image.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>4.预渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"//xiedaimala.com"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="体验快"><a href="#体验快" class="headerlink" title="体验快"></a>体验快</h2><p>所谓的体验快就是让用户觉得网站的交互是“流畅的”、“舒适的”。比如</p><ol><li>滚动页面不要有迟滞感</li><li>对于短时连续大量触发的操作要做节流</li><li>一些常见操作不要感觉拖泥带水</li><li>DOM 的操作不要过于频繁</li><li>不要出现内存泄露</li><li>优化复杂运算</li><li>动画不要卡顿</li><li>多用 CSS 动画，少用 JS 动画</li><li>开启硬件加速</li><li>不要用 setTimeout/setInterval 去模拟动画</li><li>动画或者过渡的执行时间不要太久</li></ol><h2 id="性能优化的建议"><a href="#性能优化的建议" class="headerlink" title="性能优化的建议"></a>性能优化的建议</h2><p>臆想的优化不是优化，无明显成效的优化不是优化。浏览器的性能已经足够快，不要因为“过渡优化”牺牲代码的可读性</p><p>先做简单见效快的优化，再做复杂见效慢的优化。一张未压缩的大图片可能抵消辛辛苦苦做的全部其他技术优化</p><p><a href="https://zhuanlan.zhihu.com/p/32150769?group_id=926470274442936320" title="Forked from 知乎" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不管是应付前端面试还是改进产品体验，性能优化都是躲不开的话题。这里我们就简单聊一聊性能优化。&lt;/p&gt;
&lt;h2 id=&quot;传输快-vs-体验快&quot;&gt;&lt;a href=&quot;#传输快-vs-体验快&quot; class=&quot;headerlink&quot; title=&quot;传输快 vs 体验快&quot;&gt;&lt;/a&gt;传输快 vs 体验快&lt;/h2&gt;&lt;p&gt;优化的目的是让用户有“快”的感受，那如何让用户感受到快呢？&lt;/p&gt;
&lt;p&gt;加载速度真的很快，用户打开输入网址按下回车立即看到了页面&lt;br&gt;加载速度并没有变快，但用户感觉你的网站很快&lt;/p&gt;
&lt;h2 id=&quot;传输快&quot;&gt;&lt;a href=&quot;#传输快&quot; class=&quot;headerlink&quot; title=&quot;传输快&quot;&gt;&lt;/a&gt;传输快&lt;/h2&gt;&lt;p&gt;所谓的真快就是网站资源以最快的速度到达用户浏览器，那如何去做呢？我们先粗略定一些原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输的内容体积要小&lt;/li&gt;
&lt;li&gt;传输的内容数量要少&lt;/li&gt;
&lt;li&gt;网速要足够快&lt;/li&gt;
&lt;li&gt;服务器响应要及时&lt;/li&gt;
&lt;li&gt;能重复利用的资源要利用好&lt;/li&gt;
&lt;li&gt;暂时不需要的资源先不要&lt;/li&gt;
&lt;li&gt;将来需要的资源抽空要&lt;/li&gt;
&lt;li&gt;下面就能顺藤摸瓜，做个细化&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Frontend" scheme="https://blog.v2next.com/tags/Frontend/"/>
    
      <category term="Performance" scheme="https://blog.v2next.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>webpack的使用</title>
    <link href="https://blog.v2next.com/2017/08/10/Use-webpack/"/>
    <id>https://blog.v2next.com/2017/08/10/Use-webpack/</id>
    <published>2017-08-10T08:45:34.000Z</published>
    <updated>2019-10-20T07:59:34.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇对 webpack 的使用介绍，里面的内容多是依据官网例子写出的，如有问题，欢迎指出。<br>参考：<br><a href="https://segmentfault.com/a/1190000008159877" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008159877</a><br><a href="http://webpack.github.io/docs/" target="_blank" rel="noopener">http://webpack.github.io/docs/</a></p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/27953441?utm_medium=social&amp;utm_source=wechat_session" title="Forked from 知乎专栏" target="_blank" rel="noopener">原文</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;这是一篇对 webpack 的使用介绍，里面的内容多是依据官网例子写出的，如有问题，欢迎指出。&lt;br&gt;参考：&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008159877&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000008159877&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://webpack.github.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://webpack.github.io/docs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27953441?utm_medium=social&amp;amp;utm_source=wechat_session&quot; title=&quot;Forked from 知乎专栏&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://blog.v2next.com/tags/Javascript/"/>
    
      <category term="webpack" scheme="https://blog.v2next.com/tags/webpack/"/>
    
      <category term="Module" scheme="https://blog.v2next.com/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>探究Babel生态</title>
    <link href="https://blog.v2next.com/2017/08/08/Understand-Babel-ecosystem/"/>
    <id>https://blog.v2next.com/2017/08/08/Understand-Babel-ecosystem/</id>
    <published>2017-08-08T08:40:04.000Z</published>
    <updated>2019-10-20T07:59:34.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文从 babel 的基础知识，使用方法，如何配置，解析原理和如何开发 babel 插件五个方面让你了解 bablel，以便用 babel 提升开发效率。<br>使用方法和如何配置章节将告诉你在项目中如何使用 babel，解析原理和如何开发 babel 插件章节帮助你开发自己的 babel 插件。</p></blockquote><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>相信用 es6/7 写代码的同学对 babel 应该不会陌生，Babel 是用于编写下一代 JavaScript 的编译器。JavaScript 作为一门语言，不断发展更新，新的特性层出不穷，想要提前使用这些特性，必须借助像 babel 这样的编译器。目前主流浏览器最新版本都基本实现了对 es5/6 语法的完全支持，具体请参考兼容性表格,见 <a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a></p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/Wvz7HBpajwwZgScY87QSIbWg0lb4QicfNGqZJia3KRXEStwzClntN7u6icvfliaqtj2xhdtiaQ5KOx74RBLNAI5zWLA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="alt text" title="Babel"></p><p>当你需要使用 es7+语法特性或者兼容旧版本浏览器的需求时，你就需要一款编译器支持将 ES6/7 编译成浏览器支持的 ES5/ES3 代码。Babel 是使用最多的一个。除了编译器，babel 还支持语法扩展（如 react 的 JSX 语法，React 现在已经依赖 babel 编译它的 JSX 语法且弃用了它原有的自定义工具）和静态语法分析（语法检查，代码高亮，压缩，统一代码风格等）。</p><a id="more"></a><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>本文提到的所有配置的都是 babel6，babel6 废弃了 babel 包，取而代之的是各种模块包，babel6 把所有转换器都分离出去以插件的形式存在，需要单独安装插件包。意味着默认情况下 babel 不会对源码做任何转换，需要自己配置</p><h4 id="集成到工具中"><a href="#集成到工具中" class="headerlink" title="集成到工具中"></a>集成到工具中</h4><p><b>Webpack</b></p><pre>安装：npm install –save-dev babel-loader babel-core1.webpack配置：module: {  rules: [    { test: /\.js$/, exclude: /node_modules/, loader: "babel-loader" }  ]}2.配置.babelrc文件安装插件：npm install babel-preset-es2015 babel-plugin-transform-runtime.babelrc{  "presets": [“es2015”],  "plugins": [“transform-runtime”]}</pre><p><b>fis3:</b></p><pre>①  安装：npm install –save-dev babel-core fis-parser-babel-6.x②  配置fis-conf文件：fis.match('src/**.js', {           isMod: true,           preprocessor: fis.plugin('js-require-css'),           parser: fis.plugin('babel-6.x', {               sourceMaps: true,           }),           rExt: '.js'});③  创建.babelrc文件同上其他工具请参见安装组合方式。http://babeljs.io/docs/setup/#installation</pre><h4 id="命令行下使用-babel-命令编译"><a href="#命令行下使用-babel-命令编译" class="headerlink" title="命令行下使用 babel 命令编译"></a>命令行下使用 babel 命令编译</h4><h4 id="babel-register，babel-node"><a href="#babel-register，babel-node" class="headerlink" title="babel-register，babel-node"></a>babel-register，babel-node</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzOTAwOTU5NQ==&amp;mid=2247484150&amp;idx=1&amp;sn=7747918a0a04fc554e3ce5a77c6b362e&amp;chksm=facfb5a2cdb83cb43109d8329c698bddde8e150eeca6291207c12ed45dceace7717e4c7adf26&amp;mpshare=1&amp;scene=1&amp;srcid=0802JW0MtLjWJSyupjKKoWlO&amp;pass_ticket=4TLHatSXkFGfA98BgewD8BiThpO6w4bZ7HcvXB49Twk%3D#rd" title="Forked from 百度外卖" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文从 babel 的基础知识，使用方法，如何配置，解析原理和如何开发 babel 插件五个方面让你了解 bablel，以便用 babel 提升开发效率。&lt;br&gt;使用方法和如何配置章节将告诉你在项目中如何使用 babel，解析原理和如何开发 babel 插件章节帮助你开发自己的 babel 插件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;相信用 es6/7 写代码的同学对 babel 应该不会陌生，Babel 是用于编写下一代 JavaScript 的编译器。JavaScript 作为一门语言，不断发展更新，新的特性层出不穷，想要提前使用这些特性，必须借助像 babel 这样的编译器。目前主流浏览器最新版本都基本实现了对 es5/6 语法的完全支持，具体请参考兼容性表格,见 &lt;a href=&quot;http://kangax.github.io/compat-table/es6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://kangax.github.io/compat-table/es6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_png/Wvz7HBpajwwZgScY87QSIbWg0lb4QicfNGqZJia3KRXEStwzClntN7u6icvfliaqtj2xhdtiaQ5KOx74RBLNAI5zWLA/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;alt text&quot; title=&quot;Babel&quot;&gt;&lt;/p&gt;
&lt;p&gt;当你需要使用 es7+语法特性或者兼容旧版本浏览器的需求时，你就需要一款编译器支持将 ES6/7 编译成浏览器支持的 ES5/ES3 代码。Babel 是使用最多的一个。除了编译器，babel 还支持语法扩展（如 react 的 JSX 语法，React 现在已经依赖 babel 编译它的 JSX 语法且弃用了它原有的自定义工具）和静态语法分析（语法检查，代码高亮，压缩，统一代码风格等）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://blog.v2next.com/tags/Javascript/"/>
    
      <category term="Babel" scheme="https://blog.v2next.com/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>How to handle conflicts with git</title>
    <link href="https://blog.v2next.com/2017/07/25/How-to-handle-conflicts-with-git/"/>
    <id>https://blog.v2next.com/2017/07/25/How-to-handle-conflicts-with-git/</id>
    <published>2017-07-25T08:25:46.000Z</published>
    <updated>2019-10-20T07:59:34.695Z</updated>
    
    <content type="html"><![CDATA[<p>Forked from <a href="https://github.com/Kunena/Kunena-Forum/wiki/How-to-handle-conflicts-with-git" target="_blank" rel="noopener">https://github.com/Kunena/Kunena-Forum/wiki/How-to-handle-conflicts-with-git</a></p><p>How to handle conflicts when merging something with git :</p><p>When you have a fork and you want update it because you have conflicts, it’s good to know how to do it.</p><p>Don’t forget to add the remote upstream before doing the following steps.</p><p>You have done a :</p><pre>$ git fetch upstream</pre><p>and then a :</p><pre>$ git merge upstream/master</pre><a id="more"></a><p>But it has failed :</p><pre>error: Your local changes to the following files would be overwritten by merge:        build/build.numberPlease, commit your changes or stash them before you can merge.Aborting</pre><p>You have changed something in the file build/build.number, so you have two choices revert you change or if you want lose your change stash it.</p><p>In my case i do a simple revert :</p><pre>$ git reset --hard HEAD</pre><p>Now it’s good :</p><pre>HEAD is now at 030223c # [#21] Little issue with parent on agora category import</pre><p>You can do the merge :</p><pre>$ git merge upstream/master</pre><p>But now you have a conflict :</p><pre>Auto-merging administrator/components/com_kunenaimporter/CHANGELOG.phpCONFLICT (content): Merge conflict in administrator/components/com_kunenaimporter/CHANGELOG.phpAutomatic merge failed; fix conflicts and then commit the result.</pre><p>Check the differences :</p><pre>$ git diff</pre><pre>diff --cc administrator/components/com_kunenaimporter/CHANGELOG.phpindex e98aba5,9d74f73..0000000--- a/administrator/components/com_kunenaimporter/CHANGELOG.php+++ b/administrator/components/com_kunenaimporter/CHANGELOG.php@@@ -31,18 -31,34 +31,49 @@@ Legend  KunenaImporter 1.6.5-DEV++<<<<<<< HEAD +19-July-2011 Xillibit +# [#21] Little issue with parent on agora category import + +18-July-2011 Xillibit +# [#21] Improve ccboard and agora support (improve cat<c3><a9>gories, messages + +17-July-2011 Xillibit +# [#21] Improve ccboard and agora support (avatar galleries import for agora) + +14-July-2011 Xillibit +# [#21] Improve ccboard and agora support (improvements on agora categories im +# [#21] Improve ccboard and agora support (improvements on messages import)++=======+ 18-July-2011 Matias+ ^ [#30] Code cleanup in importer & exporter+ ^ [#5] Reviewed and fixed phpBB3 support, closes #5++ 17-July-2011 Matias</a9></c3></pre><p>Go into eclipse/Zend Studio and edit the file to remove the conlfict. Then, when you have done you need to mark the conflicts as resolved :</p><pre>$ git add -u</pre><p>You can check that all is fine before commit :</p><pre>$ git status</pre><pre># On branch master# Your branch is ahead of 'origin/master' by 2 commits.## Changes to be committed:##       modified:   administrator/components/com_kunenaimporter/CHANGELOG.php#       new file:   administrator/components/com_kunenaimporter/assets/agora-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/agora.png#       new file:   administrator/components/com_kunenaimporter/assets/ccboard-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/ccboard.png#       new file:   administrator/components/com_kunenaimporter/assets/discussions-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/discussions.png#       modified:   administrator/components/com_kunenaimporter/assets/importer.css#       new file:   administrator/components/com_kunenaimporter/assets/joobb-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/joobb.png#       new file:   administrator/components/com_kunenaimporter/assets/kunena.png#       new file:   administrator/components/com_kunenaimporter/assets/ninjaboard-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/ninjaboard.png#       new file:   administrator/components/com_kunenaimporter/assets/phpbb2-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/phpbb2.png#       new file:   administrator/components/com_kunenaimporter/assets/phpbb3-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/phpbb3-large.png#       new file:   administrator/components/com_kunenaimporter/assets/phpbb3.png#       new file:   administrator/components/com_kunenaimporter/assets/pnphpbb2-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/pnphpbb2.png#       new file:   administrator/components/com_kunenaimporter/assets/smf2-gray.png#       new file:   administrator/components/com_kunenaimporter/assets/smf2.png#       modified:   administrator/components/com_kunenaimporter/config.xml#       modified:   administrator/components/com_kunenaimporter/controller.php#       modified:   administrator/components/com_kunenaimporter/kunenaimporter.xml#       modified:   administrator/components/com_kunenaimporter/language/en-GB/en-GB.com_kunenaimporter.ini#       modified:   administrator/components/com_kunenaimporter/models/export.php#       modified:   administrator/components/com_kunenaimporter/models/export_ccboard.php#       modified:   administrator/components/com_kunenaimporter/models/export_example.php#       modified:   administrator/components/com_kunenaimporter/models/export_phpbb2.php#       modified:   administrator/components/com_kunenaimporter/models/export_phpbb3.php#       modified:   administrator/components/com_kunenaimporter/models/export_smf2.php#       modified:   administrator/components/com_kunenaimporter/models/import.php#       modified:   administrator/components/com_kunenaimporter/models/kunena.php#       modified:   administrator/components/com_kunenaimporter/views/default/tmpl/default.php#       modified:   administrator/components/com_kunenaimporter/views/default/view.html.php#       modified:   administrator/components/com_kunenaimporter/views/import/tmpl/default.php#       new file:   administrator/components/com_kunenaimporter/views/start/index.html#       new file:   administrator/components/com_kunenaimporter/views/start/tmpl/default.php#       new file:   administrator/components/com_kunenaimporter/views/start/tmpl/index.html#       new file:   administrator/components/com_kunenaimporter/views/start/view.html.php#       modified:   administrator/components/com_kunenaimporter/views/user/tmpl/default.php#       modified:   build/build.number#</pre><p>No conflicts anymore. So, you can commit :</p><pre>$ git commit -m "# [#74] Fix a very bad bug"</pre><p>You need to do now a push on the origin</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Forked from &lt;a href=&quot;https://github.com/Kunena/Kunena-Forum/wiki/How-to-handle-conflicts-with-git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Kunena/Kunena-Forum/wiki/How-to-handle-conflicts-with-git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to handle conflicts when merging something with git :&lt;/p&gt;
&lt;p&gt;When you have a fork and you want update it because you have conflicts, it’s good to know how to do it.&lt;/p&gt;
&lt;p&gt;Don’t forget to add the remote upstream before doing the following steps.&lt;/p&gt;
&lt;p&gt;You have done a :&lt;/p&gt;
&lt;pre&gt;$ git fetch upstream&lt;/pre&gt;

&lt;p&gt;and then a :&lt;/p&gt;
&lt;pre&gt;$ git merge upstream/master&lt;/pre&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://blog.v2next.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Create a new branch with git and manage branches</title>
    <link href="https://blog.v2next.com/2017/07/25/Create-a-new-branch-with-git-and-manage-branches/"/>
    <id>https://blog.v2next.com/2017/07/25/Create-a-new-branch-with-git-and-manage-branches/</id>
    <published>2017-07-25T08:25:46.000Z</published>
    <updated>2019-10-20T07:59:34.695Z</updated>
    
    <content type="html"><![CDATA[<p>Forked from <a href="https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches" target="_blank" rel="noopener">https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches</a></p><p>In your github fork, you need to keep your master branch clean, by clean I mean without any changes, like that you can create at any time a branch from your master. Each time that you want to commit a bug or a feature, you need to create a branch for it, which will be a copy of your master branch.</p><p>When you do a pull request on a branch, you can continue to work on another branch and make another pull request on this other branch.</p><p>Before creating a new branch, pull the changes from upstream. Your master needs to be up to date.</p><p>Create the branch on your local machine and switch in this branch :</p><pre>$ git checkout -b [name_of_your_new_branch]</pre><a id="more"></a><p>Change working branch :</p><pre>$ git checkout [name_of_your_new_branch]</pre><p>Push the branch on github :</p><pre>$ git push origin [name_of_your_new_branch]</pre><p>When you want to commit something in your branch, be sure to be in your branch.</p><p>You can see all branches created by using :</p><pre>$ git branch</pre><p>Which will show :</p><pre>* approval_messages  master  master_clean</pre><p>Add a new remote for your branch :</p><pre>$ git remote add [name_of_your_remote] <url></url></pre><p>Push changes from your commit into your branch :</p><pre>$ git push [name_of_your_new_remote] [name_of_your_branch]</pre><p>Update your branch when the original branch from official repository has been updated :</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [name_of_your_remote]</span><br></pre></td></tr></table></figure><p>Then you need to apply to merge changes, if your branch is derivated from develop you need to do :</p><pre>$ git merge [name_of_your_remote]/develop</pre><p>Delete a branch on your local filesystem :</p><pre>$ git branch -d [name_of_your_new_branch]</pre><p>To force the deletion of local branch on your filesystem :</p><pre>$ git branch -D [name_of_your_new_branch]</pre><p>Delete the branch on github :</p><pre>$ git push origin :[name_of_your_new_branch]</pre><p>The only difference is the : to say delete, you can do it too by using github interface to remove branch : <a href="https://help.github.com/articles/deleting-unused-branches" target="_blank" rel="noopener">https://help.github.com/articles/deleting-unused-branches</a>.</p><p>If you want to change default branch, it’s so easy with github, in your fork go into Admin and in the drop-down list default branch choose what you want.</p><p>This will push all your branches to the remote, and –set-upstream tracking correctly for you:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --all -u</span><br></pre></td></tr></table></figure><p>(Not exactly what the OP was asking for, but this one-liner is pretty popular)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Forked from &lt;a href=&quot;https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In your github fork, you need to keep your master branch clean, by clean I mean without any changes, like that you can create at any time a branch from your master. Each time that you want to commit a bug or a feature, you need to create a branch for it, which will be a copy of your master branch.&lt;/p&gt;
&lt;p&gt;When you do a pull request on a branch, you can continue to work on another branch and make another pull request on this other branch.&lt;/p&gt;
&lt;p&gt;Before creating a new branch, pull the changes from upstream. Your master needs to be up to date.&lt;/p&gt;
&lt;p&gt;Create the branch on your local machine and switch in this branch :&lt;/p&gt;
&lt;pre&gt;$ git checkout -b [name_of_your_new_branch]&lt;/pre&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://blog.v2next.com/tags/git/"/>
    
  </entry>
  
</feed>
